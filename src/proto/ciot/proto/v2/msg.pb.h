/* Automatically generated nanopb header */
/* Generated by nanopb-1.0.0-dev */

#ifndef PB_CIOT_CIOT_PROTO_V2_MSG_PB_H_INCLUDED
#define PB_CIOT_CIOT_PROTO_V2_MSG_PB_H_INCLUDED
#include <pb.h>
#include "ciot/proto/v2/ciot.pb.h"
#include "ciot/proto/v2/errors.pb.h"
#include "ciot/proto/v2/http_client.pb.h"
#include "ciot/proto/v2/http_server.pb.h"
#include "ciot/proto/v2/mqtt_client.pb.h"
#include "ciot/proto/v2/uart.pb.h"
#include "ciot/proto/v2/iface.pb.h"
#include "ciot/proto/v2/sys.pb.h"
#include "ciot/proto/v2/ntp.pb.h"
#include "ciot/proto/v2/ble_adv.pb.h"
#include "ciot/proto/v2/ble_scn.pb.h"
#include "ciot/proto/v2/ble.pb.h"
#include "ciot/proto/v2/dfu.pb.h"
#include "ciot/proto/v2/gpio.pb.h"
#include "ciot/proto/v2/ota.pb.h"
#include "ciot/proto/v2/storage.pb.h"
#include "ciot/proto/v2/tcp.pb.h"
#include "ciot/proto/v2/wifi.pb.h"
#include "ciot/proto/v2/logger.pb.h"
#include "ciot/proto/v2/usb.pb.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum ciot_data_type {
    CIOT_DATA_TYPE_UNKNOWN = 0,
    CIOT_DATA_TYPE_STOP = 1,
    CIOT_DATA_TYPE_CONFIG = 2,
    CIOT_DATA_TYPE_STATUS = 3,
    CIOT_DATA_TYPE_REQUEST = 4,
    CIOT_DATA_TYPE_INFO = 5
} ciot_data_type_t;

/* Struct definitions */
typedef struct ciot_get_data {
    ciot_data_type_t type;
} ciot_get_data_t;

typedef struct ciot_msg_data {
    pb_size_t which_type;
    union {
        /* bytes raw = 1;                 // Raw data. */
        ciot_get_data_t get_data; /* Get data request. */
        ciot_data_t ciot; /* CioT data. */
        ciot_sys_data_t sys; /* System data. */
        ciot_http_client_data_t http_client; /* HTTP Client data. */
        ciot_http_server_data_t http_server; /* HTTP Server data. */
        ciot_mqtt_client_data_t mqtt_client; /* MQTT Client data. */
        ciot_uart_data_t uart; /* UART data. */
        ciot_ntp_data_t ntp; /* NTP data. */
        ciot_ble_adv_data_t ble_adv; /* BLE adv data. */
        ciot_ble_scn_data_t ble_scn; /* BLE scanner data. */
        ciot_ble_data_t ble; /* BLE data. */
        ciot_dfu_data_t dfu; /* DFU data. */
        ciot_gpio_data_t gpio; /* GPIO data. */
        ciot_ota_data_t ota; /* OTA data. */
        ciot_storage_data_t storage; /* Storage data. */
        ciot_tcp_data_t eth; /* Ethernet data. */
        ciot_wifi_data_t wifi; /* WiFi data. */
        ciot_log_data_t log; /* Log data. */
        ciot_usb_data_t usb; /* USB data. */
    };
} ciot_msg_data_t;

/* Represents an CioT message */
typedef struct ciot_msg {
    uint32_t id; /* Message ID. */
    bool has_iface;
    ciot_iface_info_t iface; /* Interface information. */
    ciot_err_t error; /* Error code. */
    bool has_data;
    ciot_msg_data_t data; /* Message data. */
} ciot_msg_t;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _CIOT_DATA_TYPE_MIN CIOT_DATA_TYPE_UNKNOWN
#define _CIOT_DATA_TYPE_MAX CIOT_DATA_TYPE_INFO
#define _CIOT_DATA_TYPE_ARRAYSIZE ((ciot_data_type_t)(CIOT_DATA_TYPE_INFO+1))
#define CIOT_DATA_TYPE_DATA_TYPE_UNKNOWN CIOT_DATA_TYPE_UNKNOWN
#define CIOT_DATA_TYPE_DATA_TYPE_STOP CIOT_DATA_TYPE_STOP
#define CIOT_DATA_TYPE_DATA_TYPE_CONFIG CIOT_DATA_TYPE_CONFIG
#define CIOT_DATA_TYPE_DATA_TYPE_STATUS CIOT_DATA_TYPE_STATUS
#define CIOT_DATA_TYPE_DATA_TYPE_REQUEST CIOT_DATA_TYPE_REQUEST
#define CIOT_DATA_TYPE_DATA_TYPE_INFO CIOT_DATA_TYPE_INFO

#define ciot_get_data_t_type_ENUMTYPE ciot_data_type_t

#define ciot_msg_t_error_ENUMTYPE ciot_err_t



/* Initializer values for message structs */
#define CIOT_GET_DATA_INIT_DEFAULT               {_CIOT_DATA_TYPE_MIN}
#define CIOT_MSG_INIT_DEFAULT                    {0, false, CIOT_IFACE_INFO_INIT_DEFAULT, _CIOT_ERR_MIN, false, CIOT_MSG_DATA_INIT_DEFAULT}
#define CIOT_MSG_DATA_INIT_DEFAULT               {0, {CIOT_GET_DATA_INIT_DEFAULT}}
#define CIOT_GET_DATA_INIT_ZERO                  {_CIOT_DATA_TYPE_MIN}
#define CIOT_MSG_INIT_ZERO                       {0, false, CIOT_IFACE_INFO_INIT_ZERO, _CIOT_ERR_MIN, false, CIOT_MSG_DATA_INIT_ZERO}
#define CIOT_MSG_DATA_INIT_ZERO                  {0, {CIOT_GET_DATA_INIT_ZERO}}

/* Field tags (for use in manual encoding/decoding) */
#define CIOT_GET_DATA_TYPE_TAG                   1
#define CIOT_MSG_DATA_GET_DATA_TAG               2
#define CIOT_MSG_DATA_CIOT_TAG                   3
#define CIOT_MSG_DATA_SYS_TAG                    4
#define CIOT_MSG_DATA_HTTP_CLIENT_TAG            5
#define CIOT_MSG_DATA_HTTP_SERVER_TAG            6
#define CIOT_MSG_DATA_MQTT_CLIENT_TAG            7
#define CIOT_MSG_DATA_UART_TAG                   8
#define CIOT_MSG_DATA_NTP_TAG                    9
#define CIOT_MSG_DATA_BLE_ADV_TAG                10
#define CIOT_MSG_DATA_BLE_SCN_TAG                11
#define CIOT_MSG_DATA_BLE_TAG                    12
#define CIOT_MSG_DATA_DFU_TAG                    13
#define CIOT_MSG_DATA_GPIO_TAG                   14
#define CIOT_MSG_DATA_OTA_TAG                    15
#define CIOT_MSG_DATA_STORAGE_TAG                16
#define CIOT_MSG_DATA_ETH_TAG                    17
#define CIOT_MSG_DATA_WIFI_TAG                   18
#define CIOT_MSG_DATA_LOG_TAG                    19
#define CIOT_MSG_DATA_USB_TAG                    20
#define CIOT_MSG_ID_TAG                          1
#define CIOT_MSG_IFACE_TAG                       2
#define CIOT_MSG_ERROR_TAG                       3
#define CIOT_MSG_DATA_TAG                        4

/* Struct field encoding specification for nanopb */
#define CIOT_GET_DATA_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    type,              1)
#define CIOT_GET_DATA_CALLBACK NULL
#define CIOT_GET_DATA_DEFAULT NULL

#define CIOT_MSG_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   id,                1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  iface,             2) \
X(a, STATIC,   SINGULAR, UENUM,    error,             3) \
X(a, STATIC,   OPTIONAL, MESSAGE,  data,              4)
#define CIOT_MSG_CALLBACK NULL
#define CIOT_MSG_DEFAULT NULL
#define ciot_msg_t_iface_MSGTYPE ciot_iface_info_t
#define ciot_msg_t_data_MSGTYPE ciot_msg_data_t

#define CIOT_MSG_DATA_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    MESSAGE,  (type,get_data,get_data),   2) \
X(a, STATIC,   ONEOF,    MESSAGE,  (type,ciot,ciot),   3) \
X(a, STATIC,   ONEOF,    MESSAGE,  (type,sys,sys),    4) \
X(a, STATIC,   ONEOF,    MESSAGE,  (type,http_client,http_client),   5) \
X(a, STATIC,   ONEOF,    MESSAGE,  (type,http_server,http_server),   6) \
X(a, STATIC,   ONEOF,    MESSAGE,  (type,mqtt_client,mqtt_client),   7) \
X(a, STATIC,   ONEOF,    MESSAGE,  (type,uart,uart),   8) \
X(a, STATIC,   ONEOF,    MESSAGE,  (type,ntp,ntp),    9) \
X(a, STATIC,   ONEOF,    MESSAGE,  (type,ble_adv,ble_adv),  10) \
X(a, STATIC,   ONEOF,    MESSAGE,  (type,ble_scn,ble_scn),  11) \
X(a, STATIC,   ONEOF,    MESSAGE,  (type,ble,ble),   12) \
X(a, STATIC,   ONEOF,    MESSAGE,  (type,dfu,dfu),   13) \
X(a, STATIC,   ONEOF,    MESSAGE,  (type,gpio,gpio),  14) \
X(a, STATIC,   ONEOF,    MESSAGE,  (type,ota,ota),   15) \
X(a, STATIC,   ONEOF,    MESSAGE,  (type,storage,storage),  16) \
X(a, STATIC,   ONEOF,    MESSAGE,  (type,eth,eth),   17) \
X(a, STATIC,   ONEOF,    MESSAGE,  (type,wifi,wifi),  18) \
X(a, STATIC,   ONEOF,    MESSAGE,  (type,log,log),   19) \
X(a, STATIC,   ONEOF,    MESSAGE,  (type,usb,usb),   20)
#define CIOT_MSG_DATA_CALLBACK NULL
#define CIOT_MSG_DATA_DEFAULT NULL
#define ciot_msg_data_t_type_get_data_MSGTYPE ciot_get_data_t
#define ciot_msg_data_t_type_ciot_MSGTYPE ciot_data_t
#define ciot_msg_data_t_type_sys_MSGTYPE ciot_sys_data_t
#define ciot_msg_data_t_type_http_client_MSGTYPE ciot_http_client_data_t
#define ciot_msg_data_t_type_http_server_MSGTYPE ciot_http_server_data_t
#define ciot_msg_data_t_type_mqtt_client_MSGTYPE ciot_mqtt_client_data_t
#define ciot_msg_data_t_type_uart_MSGTYPE ciot_uart_data_t
#define ciot_msg_data_t_type_ntp_MSGTYPE ciot_ntp_data_t
#define ciot_msg_data_t_type_ble_adv_MSGTYPE ciot_ble_adv_data_t
#define ciot_msg_data_t_type_ble_scn_MSGTYPE ciot_ble_scn_data_t
#define ciot_msg_data_t_type_ble_MSGTYPE ciot_ble_data_t
#define ciot_msg_data_t_type_dfu_MSGTYPE ciot_dfu_data_t
#define ciot_msg_data_t_type_gpio_MSGTYPE ciot_gpio_data_t
#define ciot_msg_data_t_type_ota_MSGTYPE ciot_ota_data_t
#define ciot_msg_data_t_type_storage_MSGTYPE ciot_storage_data_t
#define ciot_msg_data_t_type_eth_MSGTYPE ciot_tcp_data_t
#define ciot_msg_data_t_type_wifi_MSGTYPE ciot_wifi_data_t
#define ciot_msg_data_t_type_log_MSGTYPE ciot_log_data_t
#define ciot_msg_data_t_type_usb_MSGTYPE ciot_usb_data_t

extern const pb_msgdesc_t ciot_get_data_t_msg;
extern const pb_msgdesc_t ciot_msg_t_msg;
extern const pb_msgdesc_t ciot_msg_data_t_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define CIOT_GET_DATA_FIELDS &ciot_get_data_t_msg
#define CIOT_MSG_FIELDS &ciot_msg_t_msg
#define CIOT_MSG_DATA_FIELDS &ciot_msg_data_t_msg

/* Maximum encoded size of messages (where known) */
#define CIOT_CIOT_PROTO_V2_MSG_PB_H_MAX_SIZE     CIOT_MSG_SIZE
#define CIOT_GET_DATA_SIZE                       2
#define CIOT_MSG_DATA_SIZE                       262
#define CIOT_MSG_SIZE                            283

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
