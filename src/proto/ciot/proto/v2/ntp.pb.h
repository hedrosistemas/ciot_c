/* Automatically generated nanopb header */
/* Generated by nanopb-1.0.0-dev */

#ifndef PB_CIOT_CIOT_PROTO_V2_NTP_PB_H_INCLUDED
#define PB_CIOT_CIOT_PROTO_V2_NTP_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
/* Enum representing the state of the NTP module. */
typedef enum ciot_ntp_state {
    CIOT_NTP_STATE_RESET = 0, /* NTP state: reset. */
    CIOT_NTP_STATE_COMPLETED = 1, /* NTP state: completed. */
    CIOT_NTP_STATE_IN_PROGRESS = 2 /* NTP state: in progress. */
} ciot_ntp_state_t;

/* Struct definitions */
/* Message used to stop NTP client */
typedef struct ciot_ntp_stop {
    char dummy_field;
} ciot_ntp_stop_t;

/* Message representing configuration for the NTP module. */
typedef struct ciot_ntp_cfg {
    int32_t op_mode; /* Operation mode for NTP. */
    int32_t sync_mode; /* Synchronization mode for NTP. */
    int32_t sync_interval; /* Synchronization interval for NTP. */
    char timezone[16]; /* Timezone for NTP. */
    char server1[48]; /* NTP server 1. */
    char server2[48]; /* NTP server 2. */
    char server3[48]; /* NTP server 3. */
} ciot_ntp_cfg_t;

/* Message representing status for the NTP module. */
typedef struct ciot_ntp_status {
    ciot_ntp_state_t state; /* State of the NTP module. */
    uint64_t last_sync; /* Timestamp of the last synchronization. */
    uint32_t sync_count; /* Number of synchronizations. */
    bool init; /* Initialization status. */
    bool sync; /* Synchronization status. */
} ciot_ntp_status_t;

/* Message representing an NTP request. */
typedef struct ciot_ntp_req {
    char dummy_field;
} ciot_ntp_req_t;

/* Message representing data for the NTP module. */
typedef struct ciot_ntp_data {
    pb_size_t which_type;
    union {
        ciot_ntp_stop_t stop; /* Stop NTP client. */
        ciot_ntp_cfg_t config; /* Configuration for the NTP module. */
        ciot_ntp_status_t status; /* Status of the NTP module. */
        ciot_ntp_req_t request; /* NTP request data. */
    };
} ciot_ntp_data_t;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _CIOT_NTP_STATE_MIN CIOT_NTP_STATE_RESET
#define _CIOT_NTP_STATE_MAX CIOT_NTP_STATE_IN_PROGRESS
#define _CIOT_NTP_STATE_ARRAYSIZE ((ciot_ntp_state_t)(CIOT_NTP_STATE_IN_PROGRESS+1))
#define CIOT_NTP_STATE_NTP_STATE_RESET CIOT_NTP_STATE_RESET
#define CIOT_NTP_STATE_NTP_STATE_COMPLETED CIOT_NTP_STATE_COMPLETED
#define CIOT_NTP_STATE_NTP_STATE_IN_PROGRESS CIOT_NTP_STATE_IN_PROGRESS



#define ciot_ntp_status_t_state_ENUMTYPE ciot_ntp_state_t




/* Initializer values for message structs */
#define CIOT_NTP_STOP_INIT_DEFAULT               {0}
#define CIOT_NTP_CFG_INIT_DEFAULT                {0, 0, 0, "", "", "", ""}
#define CIOT_NTP_STATUS_INIT_DEFAULT             {_CIOT_NTP_STATE_MIN, 0, 0, 0, 0}
#define CIOT_NTP_REQ_INIT_DEFAULT                {0}
#define CIOT_NTP_DATA_INIT_DEFAULT               {0, {CIOT_NTP_STOP_INIT_DEFAULT}}
#define CIOT_NTP_STOP_INIT_ZERO                  {0}
#define CIOT_NTP_CFG_INIT_ZERO                   {0, 0, 0, "", "", "", ""}
#define CIOT_NTP_STATUS_INIT_ZERO                {_CIOT_NTP_STATE_MIN, 0, 0, 0, 0}
#define CIOT_NTP_REQ_INIT_ZERO                   {0}
#define CIOT_NTP_DATA_INIT_ZERO                  {0, {CIOT_NTP_STOP_INIT_ZERO}}

/* Field tags (for use in manual encoding/decoding) */
#define CIOT_NTP_CFG_OP_MODE_TAG                 1
#define CIOT_NTP_CFG_SYNC_MODE_TAG               2
#define CIOT_NTP_CFG_SYNC_INTERVAL_TAG           3
#define CIOT_NTP_CFG_TIMEZONE_TAG                4
#define CIOT_NTP_CFG_SERVER1_TAG                 5
#define CIOT_NTP_CFG_SERVER2_TAG                 6
#define CIOT_NTP_CFG_SERVER3_TAG                 7
#define CIOT_NTP_STATUS_STATE_TAG                1
#define CIOT_NTP_STATUS_LAST_SYNC_TAG            2
#define CIOT_NTP_STATUS_SYNC_COUNT_TAG           3
#define CIOT_NTP_STATUS_INIT_TAG                 4
#define CIOT_NTP_STATUS_SYNC_TAG                 5
#define CIOT_NTP_DATA_STOP_TAG                   1
#define CIOT_NTP_DATA_CONFIG_TAG                 2
#define CIOT_NTP_DATA_STATUS_TAG                 3
#define CIOT_NTP_DATA_REQUEST_TAG                4

/* Struct field encoding specification for nanopb */
#define CIOT_NTP_STOP_FIELDLIST(X, a) \

#define CIOT_NTP_STOP_CALLBACK NULL
#define CIOT_NTP_STOP_DEFAULT NULL

#define CIOT_NTP_CFG_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    op_mode,           1) \
X(a, STATIC,   SINGULAR, INT32,    sync_mode,         2) \
X(a, STATIC,   SINGULAR, INT32,    sync_interval,     3) \
X(a, STATIC,   SINGULAR, STRING,   timezone,          4) \
X(a, STATIC,   SINGULAR, STRING,   server1,           5) \
X(a, STATIC,   SINGULAR, STRING,   server2,           6) \
X(a, STATIC,   SINGULAR, STRING,   server3,           7)
#define CIOT_NTP_CFG_CALLBACK NULL
#define CIOT_NTP_CFG_DEFAULT NULL

#define CIOT_NTP_STATUS_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    state,             1) \
X(a, STATIC,   SINGULAR, UINT64,   last_sync,         2) \
X(a, STATIC,   SINGULAR, UINT32,   sync_count,        3) \
X(a, STATIC,   SINGULAR, BOOL,     init,              4) \
X(a, STATIC,   SINGULAR, BOOL,     sync,              5)
#define CIOT_NTP_STATUS_CALLBACK NULL
#define CIOT_NTP_STATUS_DEFAULT NULL

#define CIOT_NTP_REQ_FIELDLIST(X, a) \

#define CIOT_NTP_REQ_CALLBACK NULL
#define CIOT_NTP_REQ_DEFAULT NULL

#define CIOT_NTP_DATA_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    MESSAGE,  (type,stop,stop),   1) \
X(a, STATIC,   ONEOF,    MESSAGE,  (type,config,config),   2) \
X(a, STATIC,   ONEOF,    MESSAGE,  (type,status,status),   3) \
X(a, STATIC,   ONEOF,    MESSAGE,  (type,request,request),   4)
#define CIOT_NTP_DATA_CALLBACK NULL
#define CIOT_NTP_DATA_DEFAULT NULL
#define ciot_ntp_data_t_type_stop_MSGTYPE ciot_ntp_stop_t
#define ciot_ntp_data_t_type_config_MSGTYPE ciot_ntp_cfg_t
#define ciot_ntp_data_t_type_status_MSGTYPE ciot_ntp_status_t
#define ciot_ntp_data_t_type_request_MSGTYPE ciot_ntp_req_t

extern const pb_msgdesc_t ciot_ntp_stop_t_msg;
extern const pb_msgdesc_t ciot_ntp_cfg_t_msg;
extern const pb_msgdesc_t ciot_ntp_status_t_msg;
extern const pb_msgdesc_t ciot_ntp_req_t_msg;
extern const pb_msgdesc_t ciot_ntp_data_t_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define CIOT_NTP_STOP_FIELDS &ciot_ntp_stop_t_msg
#define CIOT_NTP_CFG_FIELDS &ciot_ntp_cfg_t_msg
#define CIOT_NTP_STATUS_FIELDS &ciot_ntp_status_t_msg
#define CIOT_NTP_REQ_FIELDS &ciot_ntp_req_t_msg
#define CIOT_NTP_DATA_FIELDS &ciot_ntp_data_t_msg

/* Maximum encoded size of messages (where known) */
#define CIOT_CIOT_PROTO_V2_NTP_PB_H_MAX_SIZE     CIOT_NTP_DATA_SIZE
#define CIOT_NTP_CFG_SIZE                        197
#define CIOT_NTP_DATA_SIZE                       200
#define CIOT_NTP_REQ_SIZE                        0
#define CIOT_NTP_STATUS_SIZE                     23
#define CIOT_NTP_STOP_SIZE                       0

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
