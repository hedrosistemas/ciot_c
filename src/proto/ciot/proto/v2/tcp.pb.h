/* Automatically generated nanopb header */
/* Generated by nanopb-1.0.0-dev */

#ifndef PB_CIOT_CIOT_PROTO_V2_TCP_PB_H_INCLUDED
#define PB_CIOT_CIOT_PROTO_V2_TCP_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
/* Enum representing the state of the TCP module. */
typedef enum ciot_tcp_state {
    CIOT_TCP_STATE_STOPPED = 0, /* TCP module is stopped. */
    CIOT_TCP_STATE_STARTED = 1, /* TCP module is started. */
    CIOT_TCP_STATE_DISCONNECTING = 2, /* TCP module is disconnecting. */
    CIOT_TCP_STATE_DISCONNECTED = 3, /* TCP module is disconnected. */
    CIOT_TCP_STATE_CONNECTING = 4, /* TCP module is connecting. */
    CIOT_TCP_STATE_CONNECTED = 5, /* TCP module is connected. */
    CIOT_TCP_STATE_ERROR = 6 /* TCP module encountered an error. */
} ciot_tcp_state_t;

/* Enum representing the state of the TCP DHCP (Dynamic Host Configuration
 Protocol). */
typedef enum ciot_tcp_dhcp_state {
    CIOT_TCP_DHCP_STATE_IDLE = 0, /* TCP DHCP is idle. */
    CIOT_TCP_DHCP_STATE_STARTED = 1, /* TCP DHCP is started. */
    CIOT_TCP_DHCP_STATE_STOPPED = 2 /* TCP DHCP is stopped. */
} ciot_tcp_dhcp_state_t;

/* Enum representing different TCP DHCP configurations. */
typedef enum ciot_tcp_dhcp_cfg {
    CIOT_TCP_DHCP_CFG_NO_CHANGE = 0, /* No change in DHCP configuration. */
    CIOT_TCP_DHCP_CFG_CLIENT = 1, /* Configure as DHCP client. */
    CIOT_TCP_DHCP_CFG_SERVER = 2, /* Configure as DHCP server. */
    CIOT_TCP_DHCP_CFG_DISABLED = 3 /* Disable DHCP. */
} ciot_tcp_dhcp_cfg_t;

/* Struct definitions */
/* Stop TCP interface */
typedef struct ciot_tcp_stop {
    char dummy_field;
} ciot_tcp_stop_t;

/* Message representing configuration for the TCP module. */
typedef struct ciot_tcp_cfg {
    bool disabled; /* Disable TCP interface */
    ciot_tcp_dhcp_cfg_t dhcp; /* DHCP configuration. */
    pb_byte_t ip[4]; /* IP address. */
    pb_byte_t gateway[4]; /* Gateway address. */
    pb_byte_t mask[4]; /* Subnet mask. */
    pb_byte_t dns[4]; /* DNS address. */
} ciot_tcp_cfg_t;

/* Message representing DHCP status for the TCP module. */
typedef struct ciot_tcp_dhcp_status {
    ciot_tcp_dhcp_state_t client; /* DHCP client status. */
    ciot_tcp_dhcp_state_t server; /* DHCP server status. */
} ciot_tcp_dhcp_status_t;

/* Message representing TCP information. */
typedef struct ciot_tcp_info {
    pb_byte_t mac[6]; /* MAC address. */
    pb_byte_t ip[4]; /* IP address. */
} ciot_tcp_info_t;

/* Message representing status for the TCP module. */
typedef struct ciot_tcp_status {
    ciot_tcp_state_t state; /* State of the TCP module. */
    uint32_t conn_count; /* Connection count. */
    bool has_dhcp;
    ciot_tcp_dhcp_status_t dhcp; /* DHCP status. */
} ciot_tcp_status_t;

/* Message representing a TCP request. */
typedef struct ciot_tcp_req {
    char dummy_field;
} ciot_tcp_req_t;

/* Message representing data for the TCP module. */
typedef struct ciot_tcp_data {
    pb_size_t which_type;
    union {
        ciot_tcp_stop_t stop;
        ciot_tcp_cfg_t config; /* Configuration for the TCP module. */
        ciot_tcp_status_t status; /* Status of the TCP module. */
        ciot_tcp_req_t request; /* TCP request data. */
        ciot_tcp_info_t info; /* TCP information. */
    };
} ciot_tcp_data_t;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _CIOT_TCP_STATE_MIN CIOT_TCP_STATE_STOPPED
#define _CIOT_TCP_STATE_MAX CIOT_TCP_STATE_ERROR
#define _CIOT_TCP_STATE_ARRAYSIZE ((ciot_tcp_state_t)(CIOT_TCP_STATE_ERROR+1))
#define CIOT_TCP_STATE_TCP_STATE_STOPPED CIOT_TCP_STATE_STOPPED
#define CIOT_TCP_STATE_TCP_STATE_STARTED CIOT_TCP_STATE_STARTED
#define CIOT_TCP_STATE_TCP_STATE_DISCONNECTING CIOT_TCP_STATE_DISCONNECTING
#define CIOT_TCP_STATE_TCP_STATE_DISCONNECTED CIOT_TCP_STATE_DISCONNECTED
#define CIOT_TCP_STATE_TCP_STATE_CONNECTING CIOT_TCP_STATE_CONNECTING
#define CIOT_TCP_STATE_TCP_STATE_CONNECTED CIOT_TCP_STATE_CONNECTED
#define CIOT_TCP_STATE_TCP_STATE_ERROR CIOT_TCP_STATE_ERROR

#define _CIOT_TCP_DHCP_STATE_MIN CIOT_TCP_DHCP_STATE_IDLE
#define _CIOT_TCP_DHCP_STATE_MAX CIOT_TCP_DHCP_STATE_STOPPED
#define _CIOT_TCP_DHCP_STATE_ARRAYSIZE ((ciot_tcp_dhcp_state_t)(CIOT_TCP_DHCP_STATE_STOPPED+1))
#define CIOT_TCP_DHCP_STATE_TCP_DHCP_STATE_IDLE CIOT_TCP_DHCP_STATE_IDLE
#define CIOT_TCP_DHCP_STATE_TCP_DHCP_STATE_STARTED CIOT_TCP_DHCP_STATE_STARTED
#define CIOT_TCP_DHCP_STATE_TCP_DHCP_STATE_STOPPED CIOT_TCP_DHCP_STATE_STOPPED

#define _CIOT_TCP_DHCP_CFG_MIN CIOT_TCP_DHCP_CFG_NO_CHANGE
#define _CIOT_TCP_DHCP_CFG_MAX CIOT_TCP_DHCP_CFG_DISABLED
#define _CIOT_TCP_DHCP_CFG_ARRAYSIZE ((ciot_tcp_dhcp_cfg_t)(CIOT_TCP_DHCP_CFG_DISABLED+1))
#define CIOT_TCP_DHCP_CFG_TCP_DHCP_CFG_NO_CHANGE CIOT_TCP_DHCP_CFG_NO_CHANGE
#define CIOT_TCP_DHCP_CFG_TCP_DHCP_CFG_CLIENT CIOT_TCP_DHCP_CFG_CLIENT
#define CIOT_TCP_DHCP_CFG_TCP_DHCP_CFG_SERVER CIOT_TCP_DHCP_CFG_SERVER
#define CIOT_TCP_DHCP_CFG_TCP_DHCP_CFG_DISABLED CIOT_TCP_DHCP_CFG_DISABLED


#define ciot_tcp_cfg_t_dhcp_ENUMTYPE ciot_tcp_dhcp_cfg_t

#define ciot_tcp_dhcp_status_t_client_ENUMTYPE ciot_tcp_dhcp_state_t
#define ciot_tcp_dhcp_status_t_server_ENUMTYPE ciot_tcp_dhcp_state_t


#define ciot_tcp_status_t_state_ENUMTYPE ciot_tcp_state_t




/* Initializer values for message structs */
#define CIOT_TCP_STOP_INIT_DEFAULT               {0}
#define CIOT_TCP_CFG_INIT_DEFAULT                {0, _CIOT_TCP_DHCP_CFG_MIN, {0}, {0}, {0}, {0}}
#define CIOT_TCP_DHCP_STATUS_INIT_DEFAULT        {_CIOT_TCP_DHCP_STATE_MIN, _CIOT_TCP_DHCP_STATE_MIN}
#define CIOT_TCP_INFO_INIT_DEFAULT               {{0}, {0}}
#define CIOT_TCP_STATUS_INIT_DEFAULT             {_CIOT_TCP_STATE_MIN, 0, false, CIOT_TCP_DHCP_STATUS_INIT_DEFAULT}
#define CIOT_TCP_REQ_INIT_DEFAULT                {0}
#define CIOT_TCP_DATA_INIT_DEFAULT               {0, {CIOT_TCP_STOP_INIT_DEFAULT}}
#define CIOT_TCP_STOP_INIT_ZERO                  {0}
#define CIOT_TCP_CFG_INIT_ZERO                   {0, _CIOT_TCP_DHCP_CFG_MIN, {0}, {0}, {0}, {0}}
#define CIOT_TCP_DHCP_STATUS_INIT_ZERO           {_CIOT_TCP_DHCP_STATE_MIN, _CIOT_TCP_DHCP_STATE_MIN}
#define CIOT_TCP_INFO_INIT_ZERO                  {{0}, {0}}
#define CIOT_TCP_STATUS_INIT_ZERO                {_CIOT_TCP_STATE_MIN, 0, false, CIOT_TCP_DHCP_STATUS_INIT_ZERO}
#define CIOT_TCP_REQ_INIT_ZERO                   {0}
#define CIOT_TCP_DATA_INIT_ZERO                  {0, {CIOT_TCP_STOP_INIT_ZERO}}

/* Field tags (for use in manual encoding/decoding) */
#define CIOT_TCP_CFG_DISABLED_TAG                1
#define CIOT_TCP_CFG_DHCP_TAG                    2
#define CIOT_TCP_CFG_IP_TAG                      3
#define CIOT_TCP_CFG_GATEWAY_TAG                 4
#define CIOT_TCP_CFG_MASK_TAG                    5
#define CIOT_TCP_CFG_DNS_TAG                     6
#define CIOT_TCP_DHCP_STATUS_CLIENT_TAG          1
#define CIOT_TCP_DHCP_STATUS_SERVER_TAG          2
#define CIOT_TCP_INFO_MAC_TAG                    1
#define CIOT_TCP_INFO_IP_TAG                     2
#define CIOT_TCP_STATUS_STATE_TAG                1
#define CIOT_TCP_STATUS_CONN_COUNT_TAG           2
#define CIOT_TCP_STATUS_DHCP_TAG                 3
#define CIOT_TCP_DATA_STOP_TAG                   1
#define CIOT_TCP_DATA_CONFIG_TAG                 2
#define CIOT_TCP_DATA_STATUS_TAG                 3
#define CIOT_TCP_DATA_REQUEST_TAG                4
#define CIOT_TCP_DATA_INFO_TAG                   5

/* Struct field encoding specification for nanopb */
#define CIOT_TCP_STOP_FIELDLIST(X, a) \

#define CIOT_TCP_STOP_CALLBACK NULL
#define CIOT_TCP_STOP_DEFAULT NULL

#define CIOT_TCP_CFG_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     disabled,          1) \
X(a, STATIC,   SINGULAR, UENUM,    dhcp,              2) \
X(a, STATIC,   SINGULAR, FIXED_LENGTH_BYTES, ip,                3) \
X(a, STATIC,   SINGULAR, FIXED_LENGTH_BYTES, gateway,           4) \
X(a, STATIC,   SINGULAR, FIXED_LENGTH_BYTES, mask,              5) \
X(a, STATIC,   SINGULAR, FIXED_LENGTH_BYTES, dns,               6)
#define CIOT_TCP_CFG_CALLBACK NULL
#define CIOT_TCP_CFG_DEFAULT NULL

#define CIOT_TCP_DHCP_STATUS_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    client,            1) \
X(a, STATIC,   SINGULAR, UENUM,    server,            2)
#define CIOT_TCP_DHCP_STATUS_CALLBACK NULL
#define CIOT_TCP_DHCP_STATUS_DEFAULT NULL

#define CIOT_TCP_INFO_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, FIXED_LENGTH_BYTES, mac,               1) \
X(a, STATIC,   SINGULAR, FIXED_LENGTH_BYTES, ip,                2)
#define CIOT_TCP_INFO_CALLBACK NULL
#define CIOT_TCP_INFO_DEFAULT NULL

#define CIOT_TCP_STATUS_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    state,             1) \
X(a, STATIC,   SINGULAR, UINT32,   conn_count,        2) \
X(a, STATIC,   OPTIONAL, MESSAGE,  dhcp,              3)
#define CIOT_TCP_STATUS_CALLBACK NULL
#define CIOT_TCP_STATUS_DEFAULT NULL
#define ciot_tcp_status_t_dhcp_MSGTYPE ciot_tcp_dhcp_status_t

#define CIOT_TCP_REQ_FIELDLIST(X, a) \

#define CIOT_TCP_REQ_CALLBACK NULL
#define CIOT_TCP_REQ_DEFAULT NULL

#define CIOT_TCP_DATA_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    MESSAGE,  (type,stop,stop),   1) \
X(a, STATIC,   ONEOF,    MESSAGE,  (type,config,config),   2) \
X(a, STATIC,   ONEOF,    MESSAGE,  (type,status,status),   3) \
X(a, STATIC,   ONEOF,    MESSAGE,  (type,request,request),   4) \
X(a, STATIC,   ONEOF,    MESSAGE,  (type,info,info),   5)
#define CIOT_TCP_DATA_CALLBACK NULL
#define CIOT_TCP_DATA_DEFAULT NULL
#define ciot_tcp_data_t_type_stop_MSGTYPE ciot_tcp_stop_t
#define ciot_tcp_data_t_type_config_MSGTYPE ciot_tcp_cfg_t
#define ciot_tcp_data_t_type_status_MSGTYPE ciot_tcp_status_t
#define ciot_tcp_data_t_type_request_MSGTYPE ciot_tcp_req_t
#define ciot_tcp_data_t_type_info_MSGTYPE ciot_tcp_info_t

extern const pb_msgdesc_t ciot_tcp_stop_t_msg;
extern const pb_msgdesc_t ciot_tcp_cfg_t_msg;
extern const pb_msgdesc_t ciot_tcp_dhcp_status_t_msg;
extern const pb_msgdesc_t ciot_tcp_info_t_msg;
extern const pb_msgdesc_t ciot_tcp_status_t_msg;
extern const pb_msgdesc_t ciot_tcp_req_t_msg;
extern const pb_msgdesc_t ciot_tcp_data_t_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define CIOT_TCP_STOP_FIELDS &ciot_tcp_stop_t_msg
#define CIOT_TCP_CFG_FIELDS &ciot_tcp_cfg_t_msg
#define CIOT_TCP_DHCP_STATUS_FIELDS &ciot_tcp_dhcp_status_t_msg
#define CIOT_TCP_INFO_FIELDS &ciot_tcp_info_t_msg
#define CIOT_TCP_STATUS_FIELDS &ciot_tcp_status_t_msg
#define CIOT_TCP_REQ_FIELDS &ciot_tcp_req_t_msg
#define CIOT_TCP_DATA_FIELDS &ciot_tcp_data_t_msg

/* Maximum encoded size of messages (where known) */
#define CIOT_CIOT_PROTO_V2_TCP_PB_H_MAX_SIZE     CIOT_TCP_DATA_SIZE
#define CIOT_TCP_CFG_SIZE                        28
#define CIOT_TCP_DATA_SIZE                       30
#define CIOT_TCP_DHCP_STATUS_SIZE                4
#define CIOT_TCP_INFO_SIZE                       14
#define CIOT_TCP_REQ_SIZE                        0
#define CIOT_TCP_STATUS_SIZE                     14
#define CIOT_TCP_STOP_SIZE                       0

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
