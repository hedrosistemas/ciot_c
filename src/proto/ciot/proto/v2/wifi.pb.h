/* Automatically generated nanopb header */
/* Generated by nanopb-1.0.0-dev */

#ifndef PB_CIOT_CIOT_PROTO_V2_WIFI_PB_H_INCLUDED
#define PB_CIOT_CIOT_PROTO_V2_WIFI_PB_H_INCLUDED
#include <pb.h>
#include "ciot/proto/v2/tcp.pb.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
/* Enum representing the type of Wi-Fi connection. */
typedef enum ciot_wifi_type {
    CIOT_WIFI_TYPE_STA = 0, /* Wi-Fi station mode. */
    CIOT_WIFI_TYPE_AP = 1 /* Wi-Fi access point mode. */
} ciot_wifi_type_t;

/* Enum representing the state of Wi-Fi scanning. */
typedef enum ciot_wifi_scan_state {
    CIOT_WIFI_SCAN_STATE_IDLE = 0, /* Wi-Fi scan is idle. */
    CIOT_WIFI_SCAN_STATE_SCANNING = 1, /* Wi-Fi scan is in progress. */
    CIOT_WIFI_SCAN_STATE_SCANNED = 2, /* Wi-Fi scan completed successfully. */
    CIOT_WIFI_SCAN_STATE_ERROR = 3 /* Error occurred during Wi-Fi scan. */
} ciot_wifi_scan_state_t;

/* Enum representing the state of the Wi-Fi interface. */
typedef enum ciot_wifi_state {
    CIOT_WIFI_STATE_IDLE = 0 /* Wi-Fi interface is idle. */
} ciot_wifi_state_t;

/* Struct definitions */
/* Message representing information about a Wi-Fi access point. */
typedef struct ciot_wifi_ap_info {
    pb_byte_t bssid[6]; /* BSSID (MAC address) of the access point. */
    char ssid[32]; /* SSID (network name) of the access point. */
    int32_t rssi; /* Received Signal Strength Indicator (RSSI) of the access point. */
    int32_t authmode; /* Authentication mode of the access point. */
} ciot_wifi_ap_info_t;

/* Stop Wi-Fi interface. */
typedef struct ciot_wifi_stop {
    char dummy_field;
} ciot_wifi_stop_t;

/* Message representing configuration for the Wi-Fi interface. */
typedef struct ciot_wifi_cfg {
    bool disabled; /* Disable Wi-Fi interface */
    char ssid[32]; /* SSID of the Wi-Fi network. */
    char password[64]; /* Password for the Wi-Fi network. */
    ciot_wifi_type_t type; /* Type of Wi-Fi connection. */
    bool has_tcp;
    ciot_tcp_cfg_t tcp; /* TCP configuration for Wi-Fi communication. */
} ciot_wifi_cfg_t;

/* Message representing status for the Wi-Fi interface. */
typedef struct ciot_wifi_status {
    uint32_t disconnect_reason; /* Reason for Wi-Fi disconnection. */
    bool has_tcp;
    ciot_tcp_status_t tcp; /* Status of the TCP connection over Wi-Fi. */
} ciot_wifi_status_t;

typedef struct ciot_wifi_info {
    bool has_tcp;
    ciot_tcp_info_t tcp;
    bool has_ap;
    ciot_wifi_ap_info_t ap;
} ciot_wifi_info_t;

/* Message representing scan request */
typedef struct ciot_wifi_req_scan {
    char dummy_field;
} ciot_wifi_req_scan_t;

/* Wifi scan result */
typedef struct ciot_wifi_req_scan_result {
    uint32_t count; /* Access point count found by scan request */
} ciot_wifi_req_scan_result_t;

/* Wifi request to get the scanned access point information */
typedef struct ciot_wifi_req_get_ap {
    uint32_t id; /* Access point ID */
} ciot_wifi_req_get_ap_t;

/* Message representing a Wi-Fi request. */
typedef struct ciot_wifi_req {
    pb_size_t which_type;
    union {
        ciot_wifi_req_scan_t scan; /* Start wifi scanner */
        ciot_wifi_req_scan_result_t scan_result; /* Wifi scanner result */
        ciot_wifi_req_get_ap_t get_ap; /* Get acess point information from wifi scanner queue */
        ciot_wifi_ap_info_t get_ap_result; /* Get acess point result */
    };
} ciot_wifi_req_t;

/* Message representing data for the Wi-Fi interface. */
typedef struct ciot_wifi_data {
    pb_size_t which_type;
    union {
        ciot_wifi_stop_t stop; /* Stop Wi-Fi interface. */
        ciot_wifi_cfg_t config; /* Configuration for the Wi-Fi interface. */
        ciot_wifi_status_t status; /* Status of the Wi-Fi interface. */
        ciot_wifi_req_t request; /* Wi-Fi request data. */
        ciot_wifi_info_t info; /* TCP information. */
    };
} ciot_wifi_data_t;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _CIOT_WIFI_TYPE_MIN CIOT_WIFI_TYPE_STA
#define _CIOT_WIFI_TYPE_MAX CIOT_WIFI_TYPE_AP
#define _CIOT_WIFI_TYPE_ARRAYSIZE ((ciot_wifi_type_t)(CIOT_WIFI_TYPE_AP+1))
#define CIOT_WIFI_TYPE_WIFI_TYPE_STA CIOT_WIFI_TYPE_STA
#define CIOT_WIFI_TYPE_WIFI_TYPE_AP CIOT_WIFI_TYPE_AP

#define _CIOT_WIFI_SCAN_STATE_MIN CIOT_WIFI_SCAN_STATE_IDLE
#define _CIOT_WIFI_SCAN_STATE_MAX CIOT_WIFI_SCAN_STATE_ERROR
#define _CIOT_WIFI_SCAN_STATE_ARRAYSIZE ((ciot_wifi_scan_state_t)(CIOT_WIFI_SCAN_STATE_ERROR+1))
#define CIOT_WIFI_SCAN_STATE_WIFI_SCAN_STATE_IDLE CIOT_WIFI_SCAN_STATE_IDLE
#define CIOT_WIFI_SCAN_STATE_WIFI_SCAN_STATE_SCANNING CIOT_WIFI_SCAN_STATE_SCANNING
#define CIOT_WIFI_SCAN_STATE_WIFI_SCAN_STATE_SCANNED CIOT_WIFI_SCAN_STATE_SCANNED
#define CIOT_WIFI_SCAN_STATE_WIFI_SCAN_STATE_ERROR CIOT_WIFI_SCAN_STATE_ERROR

#define _CIOT_WIFI_STATE_MIN CIOT_WIFI_STATE_IDLE
#define _CIOT_WIFI_STATE_MAX CIOT_WIFI_STATE_IDLE
#define _CIOT_WIFI_STATE_ARRAYSIZE ((ciot_wifi_state_t)(CIOT_WIFI_STATE_IDLE+1))
#define CIOT_WIFI_STATE_WIFI_STATE_IDLE CIOT_WIFI_STATE_IDLE



#define ciot_wifi_cfg_t_type_ENUMTYPE ciot_wifi_type_t









/* Initializer values for message structs */
#define CIOT_WIFI_AP_INFO_INIT_DEFAULT           {{0}, "", 0, 0}
#define CIOT_WIFI_STOP_INIT_DEFAULT              {0}
#define CIOT_WIFI_CFG_INIT_DEFAULT               {0, "", "", _CIOT_WIFI_TYPE_MIN, false, CIOT_TCP_CFG_INIT_DEFAULT}
#define CIOT_WIFI_STATUS_INIT_DEFAULT            {0, false, CIOT_TCP_STATUS_INIT_DEFAULT}
#define CIOT_WIFI_INFO_INIT_DEFAULT              {false, CIOT_TCP_INFO_INIT_DEFAULT, false, CIOT_WIFI_AP_INFO_INIT_DEFAULT}
#define CIOT_WIFI_REQ_SCAN_INIT_DEFAULT          {0}
#define CIOT_WIFI_REQ_SCAN_RESULT_INIT_DEFAULT   {0}
#define CIOT_WIFI_REQ_GET_AP_INIT_DEFAULT        {0}
#define CIOT_WIFI_REQ_INIT_DEFAULT               {0, {CIOT_WIFI_REQ_SCAN_INIT_DEFAULT}}
#define CIOT_WIFI_DATA_INIT_DEFAULT              {0, {CIOT_WIFI_STOP_INIT_DEFAULT}}
#define CIOT_WIFI_AP_INFO_INIT_ZERO              {{0}, "", 0, 0}
#define CIOT_WIFI_STOP_INIT_ZERO                 {0}
#define CIOT_WIFI_CFG_INIT_ZERO                  {0, "", "", _CIOT_WIFI_TYPE_MIN, false, CIOT_TCP_CFG_INIT_ZERO}
#define CIOT_WIFI_STATUS_INIT_ZERO               {0, false, CIOT_TCP_STATUS_INIT_ZERO}
#define CIOT_WIFI_INFO_INIT_ZERO                 {false, CIOT_TCP_INFO_INIT_ZERO, false, CIOT_WIFI_AP_INFO_INIT_ZERO}
#define CIOT_WIFI_REQ_SCAN_INIT_ZERO             {0}
#define CIOT_WIFI_REQ_SCAN_RESULT_INIT_ZERO      {0}
#define CIOT_WIFI_REQ_GET_AP_INIT_ZERO           {0}
#define CIOT_WIFI_REQ_INIT_ZERO                  {0, {CIOT_WIFI_REQ_SCAN_INIT_ZERO}}
#define CIOT_WIFI_DATA_INIT_ZERO                 {0, {CIOT_WIFI_STOP_INIT_ZERO}}

/* Field tags (for use in manual encoding/decoding) */
#define CIOT_WIFI_AP_INFO_BSSID_TAG              1
#define CIOT_WIFI_AP_INFO_SSID_TAG               2
#define CIOT_WIFI_AP_INFO_RSSI_TAG               3
#define CIOT_WIFI_AP_INFO_AUTHMODE_TAG           4
#define CIOT_WIFI_CFG_DISABLED_TAG               1
#define CIOT_WIFI_CFG_SSID_TAG                   2
#define CIOT_WIFI_CFG_PASSWORD_TAG               3
#define CIOT_WIFI_CFG_TYPE_TAG                   4
#define CIOT_WIFI_CFG_TCP_TAG                    5
#define CIOT_WIFI_STATUS_DISCONNECT_REASON_TAG   1
#define CIOT_WIFI_STATUS_TCP_TAG                 2
#define CIOT_WIFI_INFO_TCP_TAG                   1
#define CIOT_WIFI_INFO_AP_TAG                    2
#define CIOT_WIFI_REQ_SCAN_RESULT_COUNT_TAG      1
#define CIOT_WIFI_REQ_GET_AP_ID_TAG              1
#define CIOT_WIFI_REQ_SCAN_TAG                   1
#define CIOT_WIFI_REQ_SCAN_RESULT_TAG            2
#define CIOT_WIFI_REQ_GET_AP_TAG                 3
#define CIOT_WIFI_REQ_GET_AP_RESULT_TAG          4
#define CIOT_WIFI_DATA_STOP_TAG                  1
#define CIOT_WIFI_DATA_CONFIG_TAG                2
#define CIOT_WIFI_DATA_STATUS_TAG                3
#define CIOT_WIFI_DATA_REQUEST_TAG               4
#define CIOT_WIFI_DATA_INFO_TAG                  5

/* Struct field encoding specification for nanopb */
#define CIOT_WIFI_AP_INFO_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, FIXED_LENGTH_BYTES, bssid,             1) \
X(a, STATIC,   SINGULAR, STRING,   ssid,              2) \
X(a, STATIC,   SINGULAR, INT32,    rssi,              3) \
X(a, STATIC,   SINGULAR, INT32,    authmode,          4)
#define CIOT_WIFI_AP_INFO_CALLBACK NULL
#define CIOT_WIFI_AP_INFO_DEFAULT NULL

#define CIOT_WIFI_STOP_FIELDLIST(X, a) \

#define CIOT_WIFI_STOP_CALLBACK NULL
#define CIOT_WIFI_STOP_DEFAULT NULL

#define CIOT_WIFI_CFG_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     disabled,          1) \
X(a, STATIC,   SINGULAR, STRING,   ssid,              2) \
X(a, STATIC,   SINGULAR, STRING,   password,          3) \
X(a, STATIC,   SINGULAR, UENUM,    type,              4) \
X(a, STATIC,   OPTIONAL, MESSAGE,  tcp,               5)
#define CIOT_WIFI_CFG_CALLBACK NULL
#define CIOT_WIFI_CFG_DEFAULT NULL
#define ciot_wifi_cfg_t_tcp_MSGTYPE ciot_tcp_cfg_t

#define CIOT_WIFI_STATUS_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   disconnect_reason,   1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  tcp,               2)
#define CIOT_WIFI_STATUS_CALLBACK NULL
#define CIOT_WIFI_STATUS_DEFAULT NULL
#define ciot_wifi_status_t_tcp_MSGTYPE ciot_tcp_status_t

#define CIOT_WIFI_INFO_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  tcp,               1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  ap,                2)
#define CIOT_WIFI_INFO_CALLBACK NULL
#define CIOT_WIFI_INFO_DEFAULT NULL
#define ciot_wifi_info_t_tcp_MSGTYPE ciot_tcp_info_t
#define ciot_wifi_info_t_ap_MSGTYPE ciot_wifi_ap_info_t

#define CIOT_WIFI_REQ_SCAN_FIELDLIST(X, a) \

#define CIOT_WIFI_REQ_SCAN_CALLBACK NULL
#define CIOT_WIFI_REQ_SCAN_DEFAULT NULL

#define CIOT_WIFI_REQ_SCAN_RESULT_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   count,             1)
#define CIOT_WIFI_REQ_SCAN_RESULT_CALLBACK NULL
#define CIOT_WIFI_REQ_SCAN_RESULT_DEFAULT NULL

#define CIOT_WIFI_REQ_GET_AP_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   id,                1)
#define CIOT_WIFI_REQ_GET_AP_CALLBACK NULL
#define CIOT_WIFI_REQ_GET_AP_DEFAULT NULL

#define CIOT_WIFI_REQ_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    MESSAGE,  (type,scan,scan),   1) \
X(a, STATIC,   ONEOF,    MESSAGE,  (type,scan_result,scan_result),   2) \
X(a, STATIC,   ONEOF,    MESSAGE,  (type,get_ap,get_ap),   3) \
X(a, STATIC,   ONEOF,    MESSAGE,  (type,get_ap_result,get_ap_result),   4)
#define CIOT_WIFI_REQ_CALLBACK NULL
#define CIOT_WIFI_REQ_DEFAULT NULL
#define ciot_wifi_req_t_type_scan_MSGTYPE ciot_wifi_req_scan_t
#define ciot_wifi_req_t_type_scan_result_MSGTYPE ciot_wifi_req_scan_result_t
#define ciot_wifi_req_t_type_get_ap_MSGTYPE ciot_wifi_req_get_ap_t
#define ciot_wifi_req_t_type_get_ap_result_MSGTYPE ciot_wifi_ap_info_t

#define CIOT_WIFI_DATA_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    MESSAGE,  (type,stop,stop),   1) \
X(a, STATIC,   ONEOF,    MESSAGE,  (type,config,config),   2) \
X(a, STATIC,   ONEOF,    MESSAGE,  (type,status,status),   3) \
X(a, STATIC,   ONEOF,    MESSAGE,  (type,request,request),   4) \
X(a, STATIC,   ONEOF,    MESSAGE,  (type,info,info),   5)
#define CIOT_WIFI_DATA_CALLBACK NULL
#define CIOT_WIFI_DATA_DEFAULT NULL
#define ciot_wifi_data_t_type_stop_MSGTYPE ciot_wifi_stop_t
#define ciot_wifi_data_t_type_config_MSGTYPE ciot_wifi_cfg_t
#define ciot_wifi_data_t_type_status_MSGTYPE ciot_wifi_status_t
#define ciot_wifi_data_t_type_request_MSGTYPE ciot_wifi_req_t
#define ciot_wifi_data_t_type_info_MSGTYPE ciot_wifi_info_t

extern const pb_msgdesc_t ciot_wifi_ap_info_t_msg;
extern const pb_msgdesc_t ciot_wifi_stop_t_msg;
extern const pb_msgdesc_t ciot_wifi_cfg_t_msg;
extern const pb_msgdesc_t ciot_wifi_status_t_msg;
extern const pb_msgdesc_t ciot_wifi_info_t_msg;
extern const pb_msgdesc_t ciot_wifi_req_scan_t_msg;
extern const pb_msgdesc_t ciot_wifi_req_scan_result_t_msg;
extern const pb_msgdesc_t ciot_wifi_req_get_ap_t_msg;
extern const pb_msgdesc_t ciot_wifi_req_t_msg;
extern const pb_msgdesc_t ciot_wifi_data_t_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define CIOT_WIFI_AP_INFO_FIELDS &ciot_wifi_ap_info_t_msg
#define CIOT_WIFI_STOP_FIELDS &ciot_wifi_stop_t_msg
#define CIOT_WIFI_CFG_FIELDS &ciot_wifi_cfg_t_msg
#define CIOT_WIFI_STATUS_FIELDS &ciot_wifi_status_t_msg
#define CIOT_WIFI_INFO_FIELDS &ciot_wifi_info_t_msg
#define CIOT_WIFI_REQ_SCAN_FIELDS &ciot_wifi_req_scan_t_msg
#define CIOT_WIFI_REQ_SCAN_RESULT_FIELDS &ciot_wifi_req_scan_result_t_msg
#define CIOT_WIFI_REQ_GET_AP_FIELDS &ciot_wifi_req_get_ap_t_msg
#define CIOT_WIFI_REQ_FIELDS &ciot_wifi_req_t_msg
#define CIOT_WIFI_DATA_FIELDS &ciot_wifi_data_t_msg

/* Maximum encoded size of messages (where known) */
#define CIOT_CIOT_PROTO_V2_WIFI_PB_H_MAX_SIZE    CIOT_WIFI_DATA_SIZE
#define CIOT_WIFI_AP_INFO_SIZE                   63
#define CIOT_WIFI_CFG_SIZE                       132
#define CIOT_WIFI_DATA_SIZE                      135
#define CIOT_WIFI_INFO_SIZE                      81
#define CIOT_WIFI_REQ_GET_AP_SIZE                6
#define CIOT_WIFI_REQ_SCAN_RESULT_SIZE           6
#define CIOT_WIFI_REQ_SCAN_SIZE                  0
#define CIOT_WIFI_REQ_SIZE                       65
#define CIOT_WIFI_STATUS_SIZE                    22
#define CIOT_WIFI_STOP_SIZE                      0

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
