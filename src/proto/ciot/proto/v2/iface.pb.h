/* Automatically generated nanopb header */
/* Generated by nanopb-1.0.0-dev */

#ifndef PB_CIOT_CIOT_PROTO_V2_IFACE_PB_H_INCLUDED
#define PB_CIOT_CIOT_PROTO_V2_IFACE_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
/* Enum representing different interface types. */
typedef enum ciot_iface_type {
    CIOT_IFACE_TYPE_UNDEFINED = 0, /* Undefined interface type. */
    CIOT_IFACE_TYPE_CUSTOM = 1, /* Custom interface type. */
    CIOT_IFACE_TYPE_CIOT = 2, /* CIOT interface type. */
    CIOT_IFACE_TYPE_STORAGE = 3, /* Storage interface type. */
    CIOT_IFACE_TYPE_SYS = 4, /* System interface type. */
    CIOT_IFACE_TYPE_UART = 5, /* UART interface type. */
    CIOT_IFACE_TYPE_USB = 6, /* USB interface type. */
    CIOT_IFACE_TYPE_TCP = 7, /* TCP interface type. */
    CIOT_IFACE_TYPE_ETH = 8, /* Ethernet interface type. */
    CIOT_IFACE_TYPE_WIFI = 9, /* WiFi interface type. */
    CIOT_IFACE_TYPE_BLE = 10, /* BLE interface type. */
    CIOT_IFACE_TYPE_BLE_SCN = 11, /* BLE SCN interface type. */
    CIOT_IFACE_TYPE_BLE_ADV = 12, /* BLE ADV interface type. */
    CIOT_IFACE_TYPE_GPIO = 13, /* GPIO interface type. */
    CIOT_IFACE_TYPE_NTP = 14, /* NTP interface type. */
    CIOT_IFACE_TYPE_OTA = 15, /* OTA interface type. */
    CIOT_IFACE_TYPE_DFU = 16, /* DFU interface type. */
    CIOT_IFACE_TYPE_HTTP_CLIENT = 17, /* HTTP Client interface type. */
    CIOT_IFACE_TYPE_HTTP_SERVER = 18, /* HTTP Server interface type. */
    CIOT_IFACE_TYPE_MQTT_CLIENT = 19, /* MQTT interface type. */
    CIOT_IFACE_TYPE_SOCKET = 20, /* Socket interface type. */
    CIOT_IFACE_TYPE_BRIDGE = 21, /* Bridge interface type. */
    CIOT_IFACE_TYPE_IOTA_CLIENT = 22, /* IOTA client interface type. */
    CIOT_IFACE_TYPE_IOTA_SERVER = 23, /* IOTA server interface type. */
    CIOT_IFACE_TYPE_LOG = 24 /* LOG interface type. */
} ciot_iface_type_t;

/* Enum representing different states of the interface request. */
typedef enum ciot_iface_req_state {
    CIOT_IFACE_REQ_STATE_IDLE = 0, /* Idle. No request sended or received. */
    CIOT_IFACE_REQ_STATE_SENDED = 1, /* Request sended */
    CIOT_IFACE_REQ_STATE_RECEIVED = 3 /* Request received */
} ciot_iface_req_state_t;

/* Struct definitions */
/* Message representing information about an interface. */
typedef struct ciot_iface_info {
    uint32_t id; /* Interface ID. */
    ciot_iface_type_t type; /* Interface type. */
} ciot_iface_info_t;

/* Message representing interface request status.enum */
typedef struct ciot_iface_req_status {
    uint32_t id; /* Request message ID */
    ciot_iface_req_state_t state; /* Request state */
    uint32_t data_type; /* Request message data type */
    bool has_iface;
    ciot_iface_info_t iface; /* Interface information */
} ciot_iface_req_status_t;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _CIOT_IFACE_TYPE_MIN CIOT_IFACE_TYPE_UNDEFINED
#define _CIOT_IFACE_TYPE_MAX CIOT_IFACE_TYPE_LOG
#define _CIOT_IFACE_TYPE_ARRAYSIZE ((ciot_iface_type_t)(CIOT_IFACE_TYPE_LOG+1))
#define CIOT_IFACE_TYPE_IFACE_TYPE_UNDEFINED CIOT_IFACE_TYPE_UNDEFINED
#define CIOT_IFACE_TYPE_IFACE_TYPE_CUSTOM CIOT_IFACE_TYPE_CUSTOM
#define CIOT_IFACE_TYPE_IFACE_TYPE_CIOT CIOT_IFACE_TYPE_CIOT
#define CIOT_IFACE_TYPE_IFACE_TYPE_STORAGE CIOT_IFACE_TYPE_STORAGE
#define CIOT_IFACE_TYPE_IFACE_TYPE_SYS CIOT_IFACE_TYPE_SYS
#define CIOT_IFACE_TYPE_IFACE_TYPE_UART CIOT_IFACE_TYPE_UART
#define CIOT_IFACE_TYPE_IFACE_TYPE_USB CIOT_IFACE_TYPE_USB
#define CIOT_IFACE_TYPE_IFACE_TYPE_TCP CIOT_IFACE_TYPE_TCP
#define CIOT_IFACE_TYPE_IFACE_TYPE_ETH CIOT_IFACE_TYPE_ETH
#define CIOT_IFACE_TYPE_IFACE_TYPE_WIFI CIOT_IFACE_TYPE_WIFI
#define CIOT_IFACE_TYPE_IFACE_TYPE_BLE CIOT_IFACE_TYPE_BLE
#define CIOT_IFACE_TYPE_IFACE_TYPE_BLE_SCN CIOT_IFACE_TYPE_BLE_SCN
#define CIOT_IFACE_TYPE_IFACE_TYPE_BLE_ADV CIOT_IFACE_TYPE_BLE_ADV
#define CIOT_IFACE_TYPE_IFACE_TYPE_GPIO CIOT_IFACE_TYPE_GPIO
#define CIOT_IFACE_TYPE_IFACE_TYPE_NTP CIOT_IFACE_TYPE_NTP
#define CIOT_IFACE_TYPE_IFACE_TYPE_OTA CIOT_IFACE_TYPE_OTA
#define CIOT_IFACE_TYPE_IFACE_TYPE_DFU CIOT_IFACE_TYPE_DFU
#define CIOT_IFACE_TYPE_IFACE_TYPE_HTTP_CLIENT CIOT_IFACE_TYPE_HTTP_CLIENT
#define CIOT_IFACE_TYPE_IFACE_TYPE_HTTP_SERVER CIOT_IFACE_TYPE_HTTP_SERVER
#define CIOT_IFACE_TYPE_IFACE_TYPE_MQTT_CLIENT CIOT_IFACE_TYPE_MQTT_CLIENT
#define CIOT_IFACE_TYPE_IFACE_TYPE_SOCKET CIOT_IFACE_TYPE_SOCKET
#define CIOT_IFACE_TYPE_IFACE_TYPE_BRIDGE CIOT_IFACE_TYPE_BRIDGE
#define CIOT_IFACE_TYPE_IFACE_TYPE_IOTA_CLIENT CIOT_IFACE_TYPE_IOTA_CLIENT
#define CIOT_IFACE_TYPE_IFACE_TYPE_IOTA_SERVER CIOT_IFACE_TYPE_IOTA_SERVER
#define CIOT_IFACE_TYPE_IFACE_TYPE_LOG CIOT_IFACE_TYPE_LOG

#define _CIOT_IFACE_REQ_STATE_MIN CIOT_IFACE_REQ_STATE_IDLE
#define _CIOT_IFACE_REQ_STATE_MAX CIOT_IFACE_REQ_STATE_RECEIVED
#define _CIOT_IFACE_REQ_STATE_ARRAYSIZE ((ciot_iface_req_state_t)(CIOT_IFACE_REQ_STATE_RECEIVED+1))
#define CIOT_IFACE_REQ_STATE_IFACE_REQ_STATE_IDLE CIOT_IFACE_REQ_STATE_IDLE
#define CIOT_IFACE_REQ_STATE_IFACE_REQ_STATE_SENDED CIOT_IFACE_REQ_STATE_SENDED
#define CIOT_IFACE_REQ_STATE_IFACE_REQ_STATE_RECEIVED CIOT_IFACE_REQ_STATE_RECEIVED

#define ciot_iface_info_t_type_ENUMTYPE ciot_iface_type_t

#define ciot_iface_req_status_t_state_ENUMTYPE ciot_iface_req_state_t


/* Initializer values for message structs */
#define CIOT_IFACE_INFO_INIT_DEFAULT             {0, _CIOT_IFACE_TYPE_MIN}
#define CIOT_IFACE_REQ_STATUS_INIT_DEFAULT       {0, _CIOT_IFACE_REQ_STATE_MIN, 0, false, CIOT_IFACE_INFO_INIT_DEFAULT}
#define CIOT_IFACE_INFO_INIT_ZERO                {0, _CIOT_IFACE_TYPE_MIN}
#define CIOT_IFACE_REQ_STATUS_INIT_ZERO          {0, _CIOT_IFACE_REQ_STATE_MIN, 0, false, CIOT_IFACE_INFO_INIT_ZERO}

/* Field tags (for use in manual encoding/decoding) */
#define CIOT_IFACE_INFO_ID_TAG                   1
#define CIOT_IFACE_INFO_TYPE_TAG                 2
#define CIOT_IFACE_REQ_STATUS_ID_TAG             1
#define CIOT_IFACE_REQ_STATUS_STATE_TAG          2
#define CIOT_IFACE_REQ_STATUS_DATA_TYPE_TAG      3
#define CIOT_IFACE_REQ_STATUS_IFACE_TAG          4

/* Struct field encoding specification for nanopb */
#define CIOT_IFACE_INFO_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   id,                1) \
X(a, STATIC,   SINGULAR, UENUM,    type,              2)
#define CIOT_IFACE_INFO_CALLBACK NULL
#define CIOT_IFACE_INFO_DEFAULT NULL

#define CIOT_IFACE_REQ_STATUS_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   id,                1) \
X(a, STATIC,   SINGULAR, UENUM,    state,             2) \
X(a, STATIC,   SINGULAR, UINT32,   data_type,         3) \
X(a, STATIC,   OPTIONAL, MESSAGE,  iface,             4)
#define CIOT_IFACE_REQ_STATUS_CALLBACK NULL
#define CIOT_IFACE_REQ_STATUS_DEFAULT NULL
#define ciot_iface_req_status_t_iface_MSGTYPE ciot_iface_info_t

extern const pb_msgdesc_t ciot_iface_info_t_msg;
extern const pb_msgdesc_t ciot_iface_req_status_t_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define CIOT_IFACE_INFO_FIELDS &ciot_iface_info_t_msg
#define CIOT_IFACE_REQ_STATUS_FIELDS &ciot_iface_req_status_t_msg

/* Maximum encoded size of messages (where known) */
#define CIOT_CIOT_PROTO_V2_IFACE_PB_H_MAX_SIZE   CIOT_IFACE_REQ_STATUS_SIZE
#define CIOT_IFACE_INFO_SIZE                     8
#define CIOT_IFACE_REQ_STATUS_SIZE               24

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
