/* Automatically generated nanopb header */
/* Generated by nanopb-1.0.0-dev */

#ifndef PB_CIOT_CIOT_PROTO_V2_BLE_SCN_PB_H_INCLUDED
#define PB_CIOT_CIOT_PROTO_V2_BLE_SCN_PB_H_INCLUDED
#include <pb.h>
#include "ciot/proto/v2/errors.pb.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
/* Possible ble scanner states */
typedef enum ciot_ble_scn_state {
    /* Idle state */
    CIOT_BLE_SCN_STATE_IDLE = 0,
    /* Passive scan enabled */
    CIOT_BLE_SCN_STATE_PASSIVE = 1,
    /* Active scan enabled */
    CIOT_BLE_SCN_STATE_ACTIVE = 2
} ciot_ble_scn_state_t;

/* Struct definitions */
/* Ble scanner stop message */
typedef struct ciot_ble_scn_stop {
    char dummy_field;
} ciot_ble_scn_stop_t;

/* Ble scanner configuration */
typedef struct ciot_ble_scn_cfg {
    /* Scanner interval */
    uint32_t interval;
    /* Scanner window */
    uint32_t window;
    /* Scanner timeout */
    uint32_t timeout;
    /* Enable/disable active scan mode */
    bool active;
    /* Enable/disable bridge. On bridge mode ciot lib dosen't interpret adv
 messages as an CioT requests and send all of them to the main application
 as an data message. */
    bool bridge_mode;
} ciot_ble_scn_cfg_t;

/* Ble scanner advertisement information */
typedef struct ciot_ble_scn_adv_info {
    /* Device mac */
    pb_byte_t mac[6];
    /* Signal strenght */
    int32_t rssi;
} ciot_ble_scn_adv_info_t;

typedef PB_BYTES_ARRAY_T(38) ciot_ble_scn_adv_payload_t;
/* Ble scanner advertisement */
typedef struct ciot_ble_scn_adv {
    /* Advertisement information */
    bool has_info;
    ciot_ble_scn_adv_info_t info;
    /* Advertisement payload */
    ciot_ble_scn_adv_payload_t payload;
} ciot_ble_scn_adv_t;

/* Ble scanner status */
typedef struct ciot_ble_scn_status {
    /* Current state */
    ciot_ble_scn_state_t state;
    /* Current error code */
    ciot_err_t err_code;
    /* ADVs counter */
    uint32_t advs_losted;
    /* Current fifo lenght */
    uint32_t fifo_len;
    /* Fifo maximum size */
    uint32_t fifo_max;
} ciot_ble_scn_status_t;

/* Ble scanner request */
typedef struct ciot_ble_scn_req {
    char dummy_field;
} ciot_ble_scn_req_t;

/* Ble scanner data */
typedef struct ciot_ble_scn_data {
    pb_size_t which_type;
    union {
        /* Stop ble scanner interface */
        ciot_ble_scn_stop_t stop;
        /* Configuration */
        ciot_ble_scn_cfg_t config;
        /* Status */
        ciot_ble_scn_status_t status;
        /* Request */
        ciot_ble_scn_req_t request;
    };
} ciot_ble_scn_data_t;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _CIOT_BLE_SCN_STATE_MIN CIOT_BLE_SCN_STATE_IDLE
#define _CIOT_BLE_SCN_STATE_MAX CIOT_BLE_SCN_STATE_ACTIVE
#define _CIOT_BLE_SCN_STATE_ARRAYSIZE ((ciot_ble_scn_state_t)(CIOT_BLE_SCN_STATE_ACTIVE+1))
#define CIOT_BLE_SCN_STATE_BLE_SCN_STATE_IDLE CIOT_BLE_SCN_STATE_IDLE
#define CIOT_BLE_SCN_STATE_BLE_SCN_STATE_PASSIVE CIOT_BLE_SCN_STATE_PASSIVE
#define CIOT_BLE_SCN_STATE_BLE_SCN_STATE_ACTIVE CIOT_BLE_SCN_STATE_ACTIVE





#define ciot_ble_scn_status_t_state_ENUMTYPE ciot_ble_scn_state_t
#define ciot_ble_scn_status_t_err_code_ENUMTYPE ciot_err_t




/* Initializer values for message structs */
#define CIOT_BLE_SCN_STOP_INIT_DEFAULT           {0}
#define CIOT_BLE_SCN_CFG_INIT_DEFAULT            {0, 0, 0, 0, 0}
#define CIOT_BLE_SCN_ADV_INFO_INIT_DEFAULT       {{0}, 0}
#define CIOT_BLE_SCN_ADV_INIT_DEFAULT            {false, CIOT_BLE_SCN_ADV_INFO_INIT_DEFAULT, {0, {0}}}
#define CIOT_BLE_SCN_STATUS_INIT_DEFAULT         {_CIOT_BLE_SCN_STATE_MIN, _CIOT_ERR_MIN, 0, 0, 0}
#define CIOT_BLE_SCN_REQ_INIT_DEFAULT            {0}
#define CIOT_BLE_SCN_DATA_INIT_DEFAULT           {0, {CIOT_BLE_SCN_STOP_INIT_DEFAULT}}
#define CIOT_BLE_SCN_STOP_INIT_ZERO              {0}
#define CIOT_BLE_SCN_CFG_INIT_ZERO               {0, 0, 0, 0, 0}
#define CIOT_BLE_SCN_ADV_INFO_INIT_ZERO          {{0}, 0}
#define CIOT_BLE_SCN_ADV_INIT_ZERO               {false, CIOT_BLE_SCN_ADV_INFO_INIT_ZERO, {0, {0}}}
#define CIOT_BLE_SCN_STATUS_INIT_ZERO            {_CIOT_BLE_SCN_STATE_MIN, _CIOT_ERR_MIN, 0, 0, 0}
#define CIOT_BLE_SCN_REQ_INIT_ZERO               {0}
#define CIOT_BLE_SCN_DATA_INIT_ZERO              {0, {CIOT_BLE_SCN_STOP_INIT_ZERO}}

/* Field tags (for use in manual encoding/decoding) */
#define CIOT_BLE_SCN_CFG_INTERVAL_TAG            1
#define CIOT_BLE_SCN_CFG_WINDOW_TAG              2
#define CIOT_BLE_SCN_CFG_TIMEOUT_TAG             3
#define CIOT_BLE_SCN_CFG_ACTIVE_TAG              4
#define CIOT_BLE_SCN_CFG_BRIDGE_MODE_TAG         5
#define CIOT_BLE_SCN_ADV_INFO_MAC_TAG            1
#define CIOT_BLE_SCN_ADV_INFO_RSSI_TAG           2
#define CIOT_BLE_SCN_ADV_INFO_TAG                1
#define CIOT_BLE_SCN_ADV_PAYLOAD_TAG             2
#define CIOT_BLE_SCN_STATUS_STATE_TAG            1
#define CIOT_BLE_SCN_STATUS_ERR_CODE_TAG         2
#define CIOT_BLE_SCN_STATUS_ADVS_LOSTED_TAG      3
#define CIOT_BLE_SCN_STATUS_FIFO_LEN_TAG         4
#define CIOT_BLE_SCN_STATUS_FIFO_MAX_TAG         5
#define CIOT_BLE_SCN_DATA_STOP_TAG               1
#define CIOT_BLE_SCN_DATA_CONFIG_TAG             2
#define CIOT_BLE_SCN_DATA_STATUS_TAG             3
#define CIOT_BLE_SCN_DATA_REQUEST_TAG            4

/* Struct field encoding specification for nanopb */
#define CIOT_BLE_SCN_STOP_FIELDLIST(X, a) \

#define CIOT_BLE_SCN_STOP_CALLBACK NULL
#define CIOT_BLE_SCN_STOP_DEFAULT NULL

#define CIOT_BLE_SCN_CFG_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   interval,          1) \
X(a, STATIC,   SINGULAR, UINT32,   window,            2) \
X(a, STATIC,   SINGULAR, UINT32,   timeout,           3) \
X(a, STATIC,   SINGULAR, BOOL,     active,            4) \
X(a, STATIC,   SINGULAR, BOOL,     bridge_mode,       5)
#define CIOT_BLE_SCN_CFG_CALLBACK NULL
#define CIOT_BLE_SCN_CFG_DEFAULT NULL

#define CIOT_BLE_SCN_ADV_INFO_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, FIXED_LENGTH_BYTES, mac,               1) \
X(a, STATIC,   SINGULAR, SINT32,   rssi,              2)
#define CIOT_BLE_SCN_ADV_INFO_CALLBACK NULL
#define CIOT_BLE_SCN_ADV_INFO_DEFAULT NULL

#define CIOT_BLE_SCN_ADV_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  info,              1) \
X(a, STATIC,   SINGULAR, BYTES,    payload,           2)
#define CIOT_BLE_SCN_ADV_CALLBACK NULL
#define CIOT_BLE_SCN_ADV_DEFAULT NULL
#define ciot_ble_scn_adv_t_info_MSGTYPE ciot_ble_scn_adv_info_t

#define CIOT_BLE_SCN_STATUS_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    state,             1) \
X(a, STATIC,   SINGULAR, UENUM,    err_code,          2) \
X(a, STATIC,   SINGULAR, UINT32,   advs_losted,       3) \
X(a, STATIC,   SINGULAR, UINT32,   fifo_len,          4) \
X(a, STATIC,   SINGULAR, UINT32,   fifo_max,          5)
#define CIOT_BLE_SCN_STATUS_CALLBACK NULL
#define CIOT_BLE_SCN_STATUS_DEFAULT NULL

#define CIOT_BLE_SCN_REQ_FIELDLIST(X, a) \

#define CIOT_BLE_SCN_REQ_CALLBACK NULL
#define CIOT_BLE_SCN_REQ_DEFAULT NULL

#define CIOT_BLE_SCN_DATA_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    MESSAGE,  (type,stop,stop),   1) \
X(a, STATIC,   ONEOF,    MESSAGE,  (type,config,config),   2) \
X(a, STATIC,   ONEOF,    MESSAGE,  (type,status,status),   3) \
X(a, STATIC,   ONEOF,    MESSAGE,  (type,request,request),   4)
#define CIOT_BLE_SCN_DATA_CALLBACK NULL
#define CIOT_BLE_SCN_DATA_DEFAULT NULL
#define ciot_ble_scn_data_t_type_stop_MSGTYPE ciot_ble_scn_stop_t
#define ciot_ble_scn_data_t_type_config_MSGTYPE ciot_ble_scn_cfg_t
#define ciot_ble_scn_data_t_type_status_MSGTYPE ciot_ble_scn_status_t
#define ciot_ble_scn_data_t_type_request_MSGTYPE ciot_ble_scn_req_t

extern const pb_msgdesc_t ciot_ble_scn_stop_t_msg;
extern const pb_msgdesc_t ciot_ble_scn_cfg_t_msg;
extern const pb_msgdesc_t ciot_ble_scn_adv_info_t_msg;
extern const pb_msgdesc_t ciot_ble_scn_adv_t_msg;
extern const pb_msgdesc_t ciot_ble_scn_status_t_msg;
extern const pb_msgdesc_t ciot_ble_scn_req_t_msg;
extern const pb_msgdesc_t ciot_ble_scn_data_t_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define CIOT_BLE_SCN_STOP_FIELDS &ciot_ble_scn_stop_t_msg
#define CIOT_BLE_SCN_CFG_FIELDS &ciot_ble_scn_cfg_t_msg
#define CIOT_BLE_SCN_ADV_INFO_FIELDS &ciot_ble_scn_adv_info_t_msg
#define CIOT_BLE_SCN_ADV_FIELDS &ciot_ble_scn_adv_t_msg
#define CIOT_BLE_SCN_STATUS_FIELDS &ciot_ble_scn_status_t_msg
#define CIOT_BLE_SCN_REQ_FIELDS &ciot_ble_scn_req_t_msg
#define CIOT_BLE_SCN_DATA_FIELDS &ciot_ble_scn_data_t_msg

/* Maximum encoded size of messages (where known) */
#define CIOT_BLE_SCN_ADV_INFO_SIZE               14
#define CIOT_BLE_SCN_ADV_SIZE                    56
#define CIOT_BLE_SCN_CFG_SIZE                    22
#define CIOT_BLE_SCN_DATA_SIZE                   24
#define CIOT_BLE_SCN_REQ_SIZE                    0
#define CIOT_BLE_SCN_STATUS_SIZE                 22
#define CIOT_BLE_SCN_STOP_SIZE                   0
#define CIOT_CIOT_PROTO_V2_BLE_SCN_PB_H_MAX_SIZE CIOT_BLE_SCN_ADV_SIZE

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
