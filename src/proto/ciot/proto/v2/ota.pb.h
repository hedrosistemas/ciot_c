/* Automatically generated nanopb header */
/* Generated by nanopb-1.0.0-dev */

#ifndef PB_CIOT_CIOT_PROTO_V2_OTA_PB_H_INCLUDED
#define PB_CIOT_CIOT_PROTO_V2_OTA_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
/* Enum representing the different OTA types */
typedef enum ciot_ota_type {
    CIOT_OTA_TYPE_DEFAULT = 0, /* Default OTA type used do update firmware */
    CIOT_OTA_TYPE_DATA_SPIFFS = 1 /* Data SPIFFS OTA type used to update data spiffs partition */
} ciot_ota_type_t;

/* Enum representing the state of the OTA (Over-the-Air) update process. */
typedef enum ciot_ota_state {
    CIOT_OTA_STATE_IDLE = 0, /* OTA process is idle. */
    CIOT_OTA_STATE_INIT = 1, /* OTA process is initialized. */
    CIOT_OTA_STATE_IN_PROGRESS = 2, /* OTA process is in progress. */
    CIOT_OTA_STATE_START = 3, /* OTA process is starting. */
    CIOT_OTA_STATE_CONNECTED = 4, /* OTA process is connected. */
    CIOT_OTA_STATE_CHECKING_DATA = 5, /* OTA process is checking data. */
    CIOT_OTA_STATE_DECRYPTING = 6, /* OTA process is decrypting data. */
    CIOT_OTA_STATE_FLASHING = 7, /* OTA process is flashing data. */
    CIOT_OTA_STATE_UPDATE_BOOT_PARTITION = 8, /* OTA process is updating boot partition. */
    CIOT_OTA_STATE_STATE_DONE = 9, /* OTA process is done. */
    CIOT_OTA_STATE_ERROR = 10 /* OTA process encountered an error. */
} ciot_ota_state_t;

/* Struct definitions */
/* Ota stop message */
typedef struct ciot_ota_stop {
    char dummy_field;
} ciot_ota_stop_t;

/* Message representing configuration for the OTA process. */
typedef struct ciot_ota_cfg {
    char url[48]; /* URL for the OTA update. */
    bool force; /* Force OTA update. */
    bool encrypted; /* Encrypted OTA update. */
    bool restart; /* Restart device after OTA update. */
    ciot_ota_type_t type; /* OTA type */
} ciot_ota_cfg_t;

/* Message representing status for the OTA process. */
typedef struct ciot_ota_status {
    ciot_ota_state_t state; /* State of the OTA process. */
    int32_t error; /* Error code, if any. */
    uint32_t image_size; /* Size of the OTA image. */
    uint32_t image_written; /* Size of the OTA image already read. */
} ciot_ota_status_t;

/* Message representing an OTA request. */
typedef struct ciot_ota_req {
    char dummy_field;
} ciot_ota_req_t;

/* Message representing data for the OTA process. */
typedef struct ciot_ota_data {
    pb_size_t which_type;
    union {
        ciot_ota_stop_t stop; /* Stop ota interface. */
        ciot_ota_cfg_t config; /* Configuration for the OTA process. */
        ciot_ota_status_t status; /* Status of the OTA process. */
        ciot_ota_req_t request; /* OTA request data. */
    };
} ciot_ota_data_t;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _CIOT_OTA_TYPE_MIN CIOT_OTA_TYPE_DEFAULT
#define _CIOT_OTA_TYPE_MAX CIOT_OTA_TYPE_DATA_SPIFFS
#define _CIOT_OTA_TYPE_ARRAYSIZE ((ciot_ota_type_t)(CIOT_OTA_TYPE_DATA_SPIFFS+1))
#define CIOT_OTA_TYPE_OTA_TYPE_DEFAULT CIOT_OTA_TYPE_DEFAULT
#define CIOT_OTA_TYPE_OTA_TYPE_DATA_SPIFFS CIOT_OTA_TYPE_DATA_SPIFFS

#define _CIOT_OTA_STATE_MIN CIOT_OTA_STATE_IDLE
#define _CIOT_OTA_STATE_MAX CIOT_OTA_STATE_ERROR
#define _CIOT_OTA_STATE_ARRAYSIZE ((ciot_ota_state_t)(CIOT_OTA_STATE_ERROR+1))
#define CIOT_OTA_STATE_OTA_STATE_IDLE CIOT_OTA_STATE_IDLE
#define CIOT_OTA_STATE_OTA_STATE_INIT CIOT_OTA_STATE_INIT
#define CIOT_OTA_STATE_OTA_STATE_IN_PROGRESS CIOT_OTA_STATE_IN_PROGRESS
#define CIOT_OTA_STATE_OTA_STATE_START CIOT_OTA_STATE_START
#define CIOT_OTA_STATE_OTA_STATE_CONNECTED CIOT_OTA_STATE_CONNECTED
#define CIOT_OTA_STATE_OTA_STATE_CHECKING_DATA CIOT_OTA_STATE_CHECKING_DATA
#define CIOT_OTA_STATE_OTA_STATE_DECRYPTING CIOT_OTA_STATE_DECRYPTING
#define CIOT_OTA_STATE_OTA_STATE_FLASHING CIOT_OTA_STATE_FLASHING
#define CIOT_OTA_STATE_OTA_STATE_UPDATE_BOOT_PARTITION CIOT_OTA_STATE_UPDATE_BOOT_PARTITION
#define CIOT_OTA_STATE_OTA_STATE_STATE_DONE CIOT_OTA_STATE_STATE_DONE
#define CIOT_OTA_STATE_OTA_STATE_ERROR CIOT_OTA_STATE_ERROR


#define ciot_ota_cfg_t_type_ENUMTYPE ciot_ota_type_t

#define ciot_ota_status_t_state_ENUMTYPE ciot_ota_state_t




/* Initializer values for message structs */
#define CIOT_OTA_STOP_INIT_DEFAULT               {0}
#define CIOT_OTA_CFG_INIT_DEFAULT                {"", 0, 0, 0, _CIOT_OTA_TYPE_MIN}
#define CIOT_OTA_STATUS_INIT_DEFAULT             {_CIOT_OTA_STATE_MIN, 0, 0, 0}
#define CIOT_OTA_REQ_INIT_DEFAULT                {0}
#define CIOT_OTA_DATA_INIT_DEFAULT               {0, {CIOT_OTA_STOP_INIT_DEFAULT}}
#define CIOT_OTA_STOP_INIT_ZERO                  {0}
#define CIOT_OTA_CFG_INIT_ZERO                   {"", 0, 0, 0, _CIOT_OTA_TYPE_MIN}
#define CIOT_OTA_STATUS_INIT_ZERO                {_CIOT_OTA_STATE_MIN, 0, 0, 0}
#define CIOT_OTA_REQ_INIT_ZERO                   {0}
#define CIOT_OTA_DATA_INIT_ZERO                  {0, {CIOT_OTA_STOP_INIT_ZERO}}

/* Field tags (for use in manual encoding/decoding) */
#define CIOT_OTA_CFG_URL_TAG                     1
#define CIOT_OTA_CFG_FORCE_TAG                   2
#define CIOT_OTA_CFG_ENCRYPTED_TAG               3
#define CIOT_OTA_CFG_RESTART_TAG                 4
#define CIOT_OTA_CFG_TYPE_TAG                    5
#define CIOT_OTA_STATUS_STATE_TAG                1
#define CIOT_OTA_STATUS_ERROR_TAG                2
#define CIOT_OTA_STATUS_IMAGE_SIZE_TAG           3
#define CIOT_OTA_STATUS_IMAGE_WRITTEN_TAG        4
#define CIOT_OTA_DATA_STOP_TAG                   1
#define CIOT_OTA_DATA_CONFIG_TAG                 2
#define CIOT_OTA_DATA_STATUS_TAG                 3
#define CIOT_OTA_DATA_REQUEST_TAG                4

/* Struct field encoding specification for nanopb */
#define CIOT_OTA_STOP_FIELDLIST(X, a) \

#define CIOT_OTA_STOP_CALLBACK NULL
#define CIOT_OTA_STOP_DEFAULT NULL

#define CIOT_OTA_CFG_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, STRING,   url,               1) \
X(a, STATIC,   SINGULAR, BOOL,     force,             2) \
X(a, STATIC,   SINGULAR, BOOL,     encrypted,         3) \
X(a, STATIC,   SINGULAR, BOOL,     restart,           4) \
X(a, STATIC,   SINGULAR, UENUM,    type,              5)
#define CIOT_OTA_CFG_CALLBACK NULL
#define CIOT_OTA_CFG_DEFAULT NULL

#define CIOT_OTA_STATUS_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    state,             1) \
X(a, STATIC,   SINGULAR, INT32,    error,             2) \
X(a, STATIC,   SINGULAR, UINT32,   image_size,        3) \
X(a, STATIC,   SINGULAR, UINT32,   image_written,     4)
#define CIOT_OTA_STATUS_CALLBACK NULL
#define CIOT_OTA_STATUS_DEFAULT NULL

#define CIOT_OTA_REQ_FIELDLIST(X, a) \

#define CIOT_OTA_REQ_CALLBACK NULL
#define CIOT_OTA_REQ_DEFAULT NULL

#define CIOT_OTA_DATA_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    MESSAGE,  (type,stop,stop),   1) \
X(a, STATIC,   ONEOF,    MESSAGE,  (type,config,config),   2) \
X(a, STATIC,   ONEOF,    MESSAGE,  (type,status,status),   3) \
X(a, STATIC,   ONEOF,    MESSAGE,  (type,request,request),   4)
#define CIOT_OTA_DATA_CALLBACK NULL
#define CIOT_OTA_DATA_DEFAULT NULL
#define ciot_ota_data_t_type_stop_MSGTYPE ciot_ota_stop_t
#define ciot_ota_data_t_type_config_MSGTYPE ciot_ota_cfg_t
#define ciot_ota_data_t_type_status_MSGTYPE ciot_ota_status_t
#define ciot_ota_data_t_type_request_MSGTYPE ciot_ota_req_t

extern const pb_msgdesc_t ciot_ota_stop_t_msg;
extern const pb_msgdesc_t ciot_ota_cfg_t_msg;
extern const pb_msgdesc_t ciot_ota_status_t_msg;
extern const pb_msgdesc_t ciot_ota_req_t_msg;
extern const pb_msgdesc_t ciot_ota_data_t_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define CIOT_OTA_STOP_FIELDS &ciot_ota_stop_t_msg
#define CIOT_OTA_CFG_FIELDS &ciot_ota_cfg_t_msg
#define CIOT_OTA_STATUS_FIELDS &ciot_ota_status_t_msg
#define CIOT_OTA_REQ_FIELDS &ciot_ota_req_t_msg
#define CIOT_OTA_DATA_FIELDS &ciot_ota_data_t_msg

/* Maximum encoded size of messages (where known) */
#define CIOT_CIOT_PROTO_V2_OTA_PB_H_MAX_SIZE     CIOT_OTA_DATA_SIZE
#define CIOT_OTA_CFG_SIZE                        57
#define CIOT_OTA_DATA_SIZE                       59
#define CIOT_OTA_REQ_SIZE                        0
#define CIOT_OTA_STATUS_SIZE                     25
#define CIOT_OTA_STOP_SIZE                       0

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
