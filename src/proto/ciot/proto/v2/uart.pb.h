/* Automatically generated nanopb header */
/* Generated by nanopb-1.0.0-dev */

#ifndef PB_CIOT_CIOT_PROTO_V2_UART_PB_H_INCLUDED
#define PB_CIOT_CIOT_PROTO_V2_UART_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
/* Enum representing the state of the UART module. */
typedef enum ciot_uart_state {
    CIOT_UART_STATE_CLOSED = 0, /* UART is closed. */
    CIOT_UART_STATE_STARTED = 1, /* UART is started. */
    CIOT_UART_STATE_INTERNAL_ERROR = 2, /* UART encountered an internal error. */
    CIOT_UART_STATE_CIOT_S_ERROR = 3 /* UART encountered a CIOT-S (Custom IoT System) error. */
} ciot_uart_state_t;

/* Enum representing different types of UART requests. */
typedef enum ciot_uart_req_type {
    CIOT_UART_REQ_TYPE_UNKOWN = 0, /* Unknown UART request type. */
    CIOT_UART_REQ_TYPE_SEND_DATA = 1, /* Request to send data via UART. */
    CIOT_UART_REQ_TYPE_SEND_BYTES = 2 /* Request to send bytes via UART. */
} ciot_uart_req_type_t;

/* Enum representing different UART error types. */
typedef enum ciot_uart_error {
    CIOT_UART_ERROR_NONE = 0, /* No UART error. */
    CIOT_UART_ERROR_BREAK = 1, /* UART break error. */
    CIOT_UART_ERROR_BUFFER_FULL = 2, /* UART buffer full error. */
    CIOT_UART_ERROR_FIFO_OVERFLOW = 3, /* UART FIFO overflow error. */
    CIOT_UART_ERROR_FRAME = 4, /* UART frame error. */
    CIOT_UART_ERROR_PARITY = 5, /* UART parity error. */
    CIOT_UART_ERROR_DATA_BREAK = 6, /* UART data break error. */
    CIOT_UART_ERROR_OPEN = 8, /* UART open error. */
    CIOT_UART_ERROR_UNKNOWN = 9 /* Unknown UART event error. */
} ciot_uart_error_t;

/* Struct definitions */
/* Message used to stop uart interface */
typedef struct ciot_uart_stop {
    char dummy_field;
} ciot_uart_stop_t;

typedef struct ciot_uart_gpio_cfg {
    int32_t rx; /* RX pin number. */
    int32_t tx; /* TX pin number. */
    int32_t rts; /* RTS pin number. */
    int32_t cts; /* CTS pin number. */
} ciot_uart_gpio_cfg_t;

/* Message representing configuration for the UART module. */
typedef struct ciot_uart_cfg {
    uint32_t baud_rate; /* Baud rate for UART. */
    uint32_t num; /* UART number. */
    bool has_gpio;
    ciot_uart_gpio_cfg_t gpio; /* GPIO configuration for UART. */
    uint32_t parity; /* Parity for UART. */
    bool flow_control; /* Flow control for UART. */
    bool dtr; /* DTR (Data Terminal Ready) signal. */
    uint32_t mode; /* UART mode (used to enable rs485 mode on some mcus). */
    uint32_t read_timeout; /* UART read timeout */
    uint32_t write_timeout; /* UART write timeout */
} ciot_uart_cfg_t;

/* Message representing status for the UART module. */
typedef struct ciot_uart_status {
    ciot_uart_state_t state; /* State of the UART module. */
    ciot_uart_error_t error; /* Error encountered by the UART module. */
} ciot_uart_status_t;

typedef PB_BYTES_ARRAY_T(128) ciot_uart_req_send_data_t;
/* Message representing a UART request. */
typedef struct ciot_uart_req {
    pb_size_t which_type;
    union {
        ciot_uart_req_send_data_t send_data;
    };
} ciot_uart_req_t;

/* Message representing data for the UART interface. */
typedef struct ciot_uart_data {
    pb_size_t which_type;
    union {
        ciot_uart_stop_t stop; /* Stop UART interface. */
        ciot_uart_cfg_t config; /* Configuration for the UART interface. */
        ciot_uart_status_t status; /* Status of the UART interface. */
        ciot_uart_req_t request; /* UART request data. */
    };
} ciot_uart_data_t;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _CIOT_UART_STATE_MIN CIOT_UART_STATE_CLOSED
#define _CIOT_UART_STATE_MAX CIOT_UART_STATE_CIOT_S_ERROR
#define _CIOT_UART_STATE_ARRAYSIZE ((ciot_uart_state_t)(CIOT_UART_STATE_CIOT_S_ERROR+1))
#define CIOT_UART_STATE_UART_STATE_CLOSED CIOT_UART_STATE_CLOSED
#define CIOT_UART_STATE_UART_STATE_STARTED CIOT_UART_STATE_STARTED
#define CIOT_UART_STATE_UART_STATE_INTERNAL_ERROR CIOT_UART_STATE_INTERNAL_ERROR
#define CIOT_UART_STATE_UART_STATE_CIOT_S_ERROR CIOT_UART_STATE_CIOT_S_ERROR

#define _CIOT_UART_REQ_TYPE_MIN CIOT_UART_REQ_TYPE_UNKOWN
#define _CIOT_UART_REQ_TYPE_MAX CIOT_UART_REQ_TYPE_SEND_BYTES
#define _CIOT_UART_REQ_TYPE_ARRAYSIZE ((ciot_uart_req_type_t)(CIOT_UART_REQ_TYPE_SEND_BYTES+1))
#define CIOT_UART_REQ_TYPE_UART_REQ_TYPE_UNKOWN CIOT_UART_REQ_TYPE_UNKOWN
#define CIOT_UART_REQ_TYPE_UART_REQ_TYPE_SEND_DATA CIOT_UART_REQ_TYPE_SEND_DATA
#define CIOT_UART_REQ_TYPE_UART_REQ_TYPE_SEND_BYTES CIOT_UART_REQ_TYPE_SEND_BYTES

#define _CIOT_UART_ERROR_MIN CIOT_UART_ERROR_NONE
#define _CIOT_UART_ERROR_MAX CIOT_UART_ERROR_UNKNOWN
#define _CIOT_UART_ERROR_ARRAYSIZE ((ciot_uart_error_t)(CIOT_UART_ERROR_UNKNOWN+1))
#define CIOT_UART_ERROR_UART_ERROR_NONE CIOT_UART_ERROR_NONE
#define CIOT_UART_ERROR_UART_ERROR_BREAK CIOT_UART_ERROR_BREAK
#define CIOT_UART_ERROR_UART_ERROR_BUFFER_FULL CIOT_UART_ERROR_BUFFER_FULL
#define CIOT_UART_ERROR_UART_ERROR_FIFO_OVERFLOW CIOT_UART_ERROR_FIFO_OVERFLOW
#define CIOT_UART_ERROR_UART_ERROR_FRAME CIOT_UART_ERROR_FRAME
#define CIOT_UART_ERROR_UART_ERROR_PARITY CIOT_UART_ERROR_PARITY
#define CIOT_UART_ERROR_UART_ERROR_DATA_BREAK CIOT_UART_ERROR_DATA_BREAK
#define CIOT_UART_ERROR_UART_ERROR_OPEN CIOT_UART_ERROR_OPEN
#define CIOT_UART_ERROR_UART_ERROR_UNKNOWN CIOT_UART_ERROR_UNKNOWN




#define ciot_uart_status_t_state_ENUMTYPE ciot_uart_state_t
#define ciot_uart_status_t_error_ENUMTYPE ciot_uart_error_t




/* Initializer values for message structs */
#define CIOT_UART_STOP_INIT_DEFAULT              {0}
#define CIOT_UART_GPIO_CFG_INIT_DEFAULT          {0, 0, 0, 0}
#define CIOT_UART_CFG_INIT_DEFAULT               {0, 0, false, CIOT_UART_GPIO_CFG_INIT_DEFAULT, 0, 0, 0, 0, 0, 0}
#define CIOT_UART_STATUS_INIT_DEFAULT            {_CIOT_UART_STATE_MIN, _CIOT_UART_ERROR_MIN}
#define CIOT_UART_REQ_INIT_DEFAULT               {0, {{0, {0}}}}
#define CIOT_UART_DATA_INIT_DEFAULT              {0, {CIOT_UART_STOP_INIT_DEFAULT}}
#define CIOT_UART_STOP_INIT_ZERO                 {0}
#define CIOT_UART_GPIO_CFG_INIT_ZERO             {0, 0, 0, 0}
#define CIOT_UART_CFG_INIT_ZERO                  {0, 0, false, CIOT_UART_GPIO_CFG_INIT_ZERO, 0, 0, 0, 0, 0, 0}
#define CIOT_UART_STATUS_INIT_ZERO               {_CIOT_UART_STATE_MIN, _CIOT_UART_ERROR_MIN}
#define CIOT_UART_REQ_INIT_ZERO                  {0, {{0, {0}}}}
#define CIOT_UART_DATA_INIT_ZERO                 {0, {CIOT_UART_STOP_INIT_ZERO}}

/* Field tags (for use in manual encoding/decoding) */
#define CIOT_UART_GPIO_CFG_RX_TAG                1
#define CIOT_UART_GPIO_CFG_TX_TAG                2
#define CIOT_UART_GPIO_CFG_RTS_TAG               3
#define CIOT_UART_GPIO_CFG_CTS_TAG               4
#define CIOT_UART_CFG_BAUD_RATE_TAG              1
#define CIOT_UART_CFG_NUM_TAG                    2
#define CIOT_UART_CFG_GPIO_TAG                   3
#define CIOT_UART_CFG_PARITY_TAG                 4
#define CIOT_UART_CFG_FLOW_CONTROL_TAG           5
#define CIOT_UART_CFG_DTR_TAG                    6
#define CIOT_UART_CFG_MODE_TAG                   7
#define CIOT_UART_CFG_READ_TIMEOUT_TAG           8
#define CIOT_UART_CFG_WRITE_TIMEOUT_TAG          9
#define CIOT_UART_STATUS_STATE_TAG               1
#define CIOT_UART_STATUS_ERROR_TAG               2
#define CIOT_UART_REQ_SEND_DATA_TAG              1
#define CIOT_UART_DATA_STOP_TAG                  1
#define CIOT_UART_DATA_CONFIG_TAG                2
#define CIOT_UART_DATA_STATUS_TAG                3
#define CIOT_UART_DATA_REQUEST_TAG               4

/* Struct field encoding specification for nanopb */
#define CIOT_UART_STOP_FIELDLIST(X, a) \

#define CIOT_UART_STOP_CALLBACK NULL
#define CIOT_UART_STOP_DEFAULT NULL

#define CIOT_UART_GPIO_CFG_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, SINT32,   rx,                1) \
X(a, STATIC,   SINGULAR, SINT32,   tx,                2) \
X(a, STATIC,   SINGULAR, SINT32,   rts,               3) \
X(a, STATIC,   SINGULAR, SINT32,   cts,               4)
#define CIOT_UART_GPIO_CFG_CALLBACK NULL
#define CIOT_UART_GPIO_CFG_DEFAULT NULL

#define CIOT_UART_CFG_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   baud_rate,         1) \
X(a, STATIC,   SINGULAR, UINT32,   num,               2) \
X(a, STATIC,   OPTIONAL, MESSAGE,  gpio,              3) \
X(a, STATIC,   SINGULAR, UINT32,   parity,            4) \
X(a, STATIC,   SINGULAR, BOOL,     flow_control,      5) \
X(a, STATIC,   SINGULAR, BOOL,     dtr,               6) \
X(a, STATIC,   SINGULAR, UINT32,   mode,              7) \
X(a, STATIC,   SINGULAR, UINT32,   read_timeout,      8) \
X(a, STATIC,   SINGULAR, UINT32,   write_timeout,     9)
#define CIOT_UART_CFG_CALLBACK NULL
#define CIOT_UART_CFG_DEFAULT NULL
#define ciot_uart_cfg_t_gpio_MSGTYPE ciot_uart_gpio_cfg_t

#define CIOT_UART_STATUS_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    state,             1) \
X(a, STATIC,   SINGULAR, UENUM,    error,             2)
#define CIOT_UART_STATUS_CALLBACK NULL
#define CIOT_UART_STATUS_DEFAULT NULL

#define CIOT_UART_REQ_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    BYTES,    (type,send_data,send_data),   1)
#define CIOT_UART_REQ_CALLBACK NULL
#define CIOT_UART_REQ_DEFAULT NULL

#define CIOT_UART_DATA_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    MESSAGE,  (type,stop,stop),   1) \
X(a, STATIC,   ONEOF,    MESSAGE,  (type,config,config),   2) \
X(a, STATIC,   ONEOF,    MESSAGE,  (type,status,status),   3) \
X(a, STATIC,   ONEOF,    MESSAGE,  (type,request,request),   4)
#define CIOT_UART_DATA_CALLBACK NULL
#define CIOT_UART_DATA_DEFAULT NULL
#define ciot_uart_data_t_type_stop_MSGTYPE ciot_uart_stop_t
#define ciot_uart_data_t_type_config_MSGTYPE ciot_uart_cfg_t
#define ciot_uart_data_t_type_status_MSGTYPE ciot_uart_status_t
#define ciot_uart_data_t_type_request_MSGTYPE ciot_uart_req_t

extern const pb_msgdesc_t ciot_uart_stop_t_msg;
extern const pb_msgdesc_t ciot_uart_gpio_cfg_t_msg;
extern const pb_msgdesc_t ciot_uart_cfg_t_msg;
extern const pb_msgdesc_t ciot_uart_status_t_msg;
extern const pb_msgdesc_t ciot_uart_req_t_msg;
extern const pb_msgdesc_t ciot_uart_data_t_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define CIOT_UART_STOP_FIELDS &ciot_uart_stop_t_msg
#define CIOT_UART_GPIO_CFG_FIELDS &ciot_uart_gpio_cfg_t_msg
#define CIOT_UART_CFG_FIELDS &ciot_uart_cfg_t_msg
#define CIOT_UART_STATUS_FIELDS &ciot_uart_status_t_msg
#define CIOT_UART_REQ_FIELDS &ciot_uart_req_t_msg
#define CIOT_UART_DATA_FIELDS &ciot_uart_data_t_msg

/* Maximum encoded size of messages (where known) */
#define CIOT_CIOT_PROTO_V2_UART_PB_H_MAX_SIZE    CIOT_UART_DATA_SIZE
#define CIOT_UART_CFG_SIZE                       66
#define CIOT_UART_DATA_SIZE                      134
#define CIOT_UART_GPIO_CFG_SIZE                  24
#define CIOT_UART_REQ_SIZE                       131
#define CIOT_UART_STATUS_SIZE                    4
#define CIOT_UART_STOP_SIZE                      0

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
