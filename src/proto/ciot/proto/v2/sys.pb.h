/* Automatically generated nanopb header */
/* Generated by nanopb-1.0.0-dev */

#ifndef PB_CIOT_CIOT_PROTO_V2_SYS_PB_H_INCLUDED
#define PB_CIOT_CIOT_PROTO_V2_SYS_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
/* Enum representing different types of system requests. */
typedef enum ciot_sys_req_cmd {
    CIOT_SYS_REQ_CMD_UNKOWN = 0, /* Unknown system request type. */
    CIOT_SYS_REQ_CMD_RESTART = 1, /* System restart request. */
    CIOT_SYS_REQ_CMD_INIT_DFU = 2 /* System init DFU bootloader */
} ciot_sys_req_cmd_t;

/* Enum representing hardware version */
typedef enum ciot_sys_hw {
    CIOT_SYS_HW_UNKNOWN = 0, /* Unknown hardware */
    CIOT_SYS_HW_ESP8266 = 1, /* ESP8266 */
    CIOT_SYS_HW_ARDUINO = 2, /* Arduino Board */
    CIOT_SYS_HW_ESP32 = 3, /* ESP32 */
    CIOT_SYS_HW_NRF51 = 4, /* NRF51 */
    CIOT_SYS_HW_NRF52 = 5, /* NRF52 */
    CIOT_SYS_HW_LINUX = 6, /* Linux device */
    CIOT_SYS_HW_WIN32 = 7 /* Windows device */
} ciot_sys_hw_t;

/* Struct definitions */
/* Message used to stop system interface */
typedef struct ciot_sys_stop {
    char dummy_field;
} ciot_sys_stop_t;

/* Message representing configuration for the system. */
typedef struct ciot_sys_cfg {
    char dummy_field;
} ciot_sys_cfg_t;

/* Message representing system features. */
typedef struct ciot_sys_features {
    bool ntp; /* NTP feature. */
    bool dfu; /* DFU feature */
    bool ota; /* OTA (Over-the-Air update) feature. */
    bool http_client; /* HTTP client feature. */
    bool http_server; /* HTTP server feature. */
    bool mqtt_client; /* MQTT client feature. */
    bool timer; /* Timer feature. */
    bool storage; /* Storage feature. */
    bool sys; /* System feature. */
    bool uart; /* UART feature. */
    bool usb; /* USB feature. */
    bool ethernet; /* Ethernet feature. */
    bool wifi; /* WiFi feature. */
    bool ble_scn; /* Bluetooth Low Energy (BLE) Scanner feature. */
    bool gpio; /* GPIO feature */
} ciot_sys_features_t;

/* Message representing system information. */
typedef struct ciot_sys_info {
    pb_byte_t app_ver[4]; /* Application version. */
    char hw_name[16]; /* Hardware name. */
    ciot_sys_hw_t hw_type; /* Hardware type. */
    bool has_features;
    ciot_sys_features_t features; /* System features. */
} ciot_sys_info_t;

/* Message representing system status. */
typedef struct ciot_sys_status {
    uint32_t reset_reason; /* Reason for the last reset. */
    uint32_t reset_count; /* Number of resets. */
    uint32_t free_memory; /* Amount of free memory. */
    uint32_t lifetime; /* Lifetime of the system. */
} ciot_sys_status_t;

/* Message representing a system request. */
typedef struct ciot_sys_req {
    pb_size_t which_type;
    union {
        ciot_sys_req_cmd_t cmd; /* System command */
    };
} ciot_sys_req_t;

/* Message representing data for the system. */
typedef struct ciot_sys_data {
    pb_size_t which_type;
    union {
        ciot_sys_stop_t stop;
        ciot_sys_cfg_t config; /* Configuration for the system. */
        ciot_sys_status_t status; /* Status of the system. */
        ciot_sys_req_t request; /* System request data. */
        ciot_sys_info_t info; /* System info. */
    };
} ciot_sys_data_t;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _CIOT_SYS_REQ_CMD_MIN CIOT_SYS_REQ_CMD_UNKOWN
#define _CIOT_SYS_REQ_CMD_MAX CIOT_SYS_REQ_CMD_INIT_DFU
#define _CIOT_SYS_REQ_CMD_ARRAYSIZE ((ciot_sys_req_cmd_t)(CIOT_SYS_REQ_CMD_INIT_DFU+1))
#define CIOT_SYS_REQ_CMD_SYS_REQ_CMD_UNKOWN CIOT_SYS_REQ_CMD_UNKOWN
#define CIOT_SYS_REQ_CMD_SYS_REQ_CMD_RESTART CIOT_SYS_REQ_CMD_RESTART
#define CIOT_SYS_REQ_CMD_SYS_REQ_CMD_INIT_DFU CIOT_SYS_REQ_CMD_INIT_DFU

#define _CIOT_SYS_HW_MIN CIOT_SYS_HW_UNKNOWN
#define _CIOT_SYS_HW_MAX CIOT_SYS_HW_WIN32
#define _CIOT_SYS_HW_ARRAYSIZE ((ciot_sys_hw_t)(CIOT_SYS_HW_WIN32+1))
#define CIOT_SYS_HW_SYS_HW_UNKNOWN CIOT_SYS_HW_UNKNOWN
#define CIOT_SYS_HW_SYS_HW_ESP8266 CIOT_SYS_HW_ESP8266
#define CIOT_SYS_HW_SYS_HW_ARDUINO CIOT_SYS_HW_ARDUINO
#define CIOT_SYS_HW_SYS_HW_ESP32 CIOT_SYS_HW_ESP32
#define CIOT_SYS_HW_SYS_HW_NRF51 CIOT_SYS_HW_NRF51
#define CIOT_SYS_HW_SYS_HW_NRF52 CIOT_SYS_HW_NRF52
#define CIOT_SYS_HW_SYS_HW_LINUX CIOT_SYS_HW_LINUX
#define CIOT_SYS_HW_SYS_HW_WIN32 CIOT_SYS_HW_WIN32




#define ciot_sys_info_t_hw_type_ENUMTYPE ciot_sys_hw_t


#define ciot_sys_req_t_type_cmd_ENUMTYPE ciot_sys_req_cmd_t



/* Initializer values for message structs */
#define CIOT_SYS_STOP_INIT_DEFAULT               {0}
#define CIOT_SYS_CFG_INIT_DEFAULT                {0}
#define CIOT_SYS_FEATURES_INIT_DEFAULT           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
#define CIOT_SYS_INFO_INIT_DEFAULT               {{0}, "", _CIOT_SYS_HW_MIN, false, CIOT_SYS_FEATURES_INIT_DEFAULT}
#define CIOT_SYS_STATUS_INIT_DEFAULT             {0, 0, 0, 0}
#define CIOT_SYS_REQ_INIT_DEFAULT                {0, {_CIOT_SYS_REQ_CMD_MIN}}
#define CIOT_SYS_DATA_INIT_DEFAULT               {0, {CIOT_SYS_STOP_INIT_DEFAULT}}
#define CIOT_SYS_STOP_INIT_ZERO                  {0}
#define CIOT_SYS_CFG_INIT_ZERO                   {0}
#define CIOT_SYS_FEATURES_INIT_ZERO              {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
#define CIOT_SYS_INFO_INIT_ZERO                  {{0}, "", _CIOT_SYS_HW_MIN, false, CIOT_SYS_FEATURES_INIT_ZERO}
#define CIOT_SYS_STATUS_INIT_ZERO                {0, 0, 0, 0}
#define CIOT_SYS_REQ_INIT_ZERO                   {0, {_CIOT_SYS_REQ_CMD_MIN}}
#define CIOT_SYS_DATA_INIT_ZERO                  {0, {CIOT_SYS_STOP_INIT_ZERO}}

/* Field tags (for use in manual encoding/decoding) */
#define CIOT_SYS_FEATURES_NTP_TAG                1
#define CIOT_SYS_FEATURES_DFU_TAG                2
#define CIOT_SYS_FEATURES_OTA_TAG                3
#define CIOT_SYS_FEATURES_HTTP_CLIENT_TAG        4
#define CIOT_SYS_FEATURES_HTTP_SERVER_TAG        5
#define CIOT_SYS_FEATURES_MQTT_CLIENT_TAG        6
#define CIOT_SYS_FEATURES_TIMER_TAG              7
#define CIOT_SYS_FEATURES_STORAGE_TAG            8
#define CIOT_SYS_FEATURES_SYS_TAG                9
#define CIOT_SYS_FEATURES_UART_TAG               10
#define CIOT_SYS_FEATURES_USB_TAG                11
#define CIOT_SYS_FEATURES_ETHERNET_TAG           12
#define CIOT_SYS_FEATURES_WIFI_TAG               13
#define CIOT_SYS_FEATURES_BLE_SCN_TAG            14
#define CIOT_SYS_FEATURES_GPIO_TAG               15
#define CIOT_SYS_INFO_APP_VER_TAG                1
#define CIOT_SYS_INFO_HW_NAME_TAG                2
#define CIOT_SYS_INFO_HW_TYPE_TAG                3
#define CIOT_SYS_INFO_FEATURES_TAG               4
#define CIOT_SYS_STATUS_RESET_REASON_TAG         1
#define CIOT_SYS_STATUS_RESET_COUNT_TAG          2
#define CIOT_SYS_STATUS_FREE_MEMORY_TAG          3
#define CIOT_SYS_STATUS_LIFETIME_TAG             4
#define CIOT_SYS_REQ_CMD_TAG                     1
#define CIOT_SYS_DATA_STOP_TAG                   1
#define CIOT_SYS_DATA_CONFIG_TAG                 2
#define CIOT_SYS_DATA_STATUS_TAG                 3
#define CIOT_SYS_DATA_REQUEST_TAG                4
#define CIOT_SYS_DATA_INFO_TAG                   5

/* Struct field encoding specification for nanopb */
#define CIOT_SYS_STOP_FIELDLIST(X, a) \

#define CIOT_SYS_STOP_CALLBACK NULL
#define CIOT_SYS_STOP_DEFAULT NULL

#define CIOT_SYS_CFG_FIELDLIST(X, a) \

#define CIOT_SYS_CFG_CALLBACK NULL
#define CIOT_SYS_CFG_DEFAULT NULL

#define CIOT_SYS_FEATURES_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     ntp,               1) \
X(a, STATIC,   SINGULAR, BOOL,     dfu,               2) \
X(a, STATIC,   SINGULAR, BOOL,     ota,               3) \
X(a, STATIC,   SINGULAR, BOOL,     http_client,       4) \
X(a, STATIC,   SINGULAR, BOOL,     http_server,       5) \
X(a, STATIC,   SINGULAR, BOOL,     mqtt_client,       6) \
X(a, STATIC,   SINGULAR, BOOL,     timer,             7) \
X(a, STATIC,   SINGULAR, BOOL,     storage,           8) \
X(a, STATIC,   SINGULAR, BOOL,     sys,               9) \
X(a, STATIC,   SINGULAR, BOOL,     uart,             10) \
X(a, STATIC,   SINGULAR, BOOL,     usb,              11) \
X(a, STATIC,   SINGULAR, BOOL,     ethernet,         12) \
X(a, STATIC,   SINGULAR, BOOL,     wifi,             13) \
X(a, STATIC,   SINGULAR, BOOL,     ble_scn,          14) \
X(a, STATIC,   SINGULAR, BOOL,     gpio,             15)
#define CIOT_SYS_FEATURES_CALLBACK NULL
#define CIOT_SYS_FEATURES_DEFAULT NULL

#define CIOT_SYS_INFO_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, FIXED_LENGTH_BYTES, app_ver,           1) \
X(a, STATIC,   SINGULAR, STRING,   hw_name,           2) \
X(a, STATIC,   SINGULAR, UENUM,    hw_type,           3) \
X(a, STATIC,   OPTIONAL, MESSAGE,  features,          4)
#define CIOT_SYS_INFO_CALLBACK NULL
#define CIOT_SYS_INFO_DEFAULT NULL
#define ciot_sys_info_t_features_MSGTYPE ciot_sys_features_t

#define CIOT_SYS_STATUS_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   reset_reason,      1) \
X(a, STATIC,   SINGULAR, UINT32,   reset_count,       2) \
X(a, STATIC,   SINGULAR, UINT32,   free_memory,       3) \
X(a, STATIC,   SINGULAR, UINT32,   lifetime,          4)
#define CIOT_SYS_STATUS_CALLBACK NULL
#define CIOT_SYS_STATUS_DEFAULT NULL

#define CIOT_SYS_REQ_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    UENUM,    (type,cmd,cmd),    1)
#define CIOT_SYS_REQ_CALLBACK NULL
#define CIOT_SYS_REQ_DEFAULT NULL

#define CIOT_SYS_DATA_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    MESSAGE,  (type,stop,stop),   1) \
X(a, STATIC,   ONEOF,    MESSAGE,  (type,config,config),   2) \
X(a, STATIC,   ONEOF,    MESSAGE,  (type,status,status),   3) \
X(a, STATIC,   ONEOF,    MESSAGE,  (type,request,request),   4) \
X(a, STATIC,   ONEOF,    MESSAGE,  (type,info,info),   5)
#define CIOT_SYS_DATA_CALLBACK NULL
#define CIOT_SYS_DATA_DEFAULT NULL
#define ciot_sys_data_t_type_stop_MSGTYPE ciot_sys_stop_t
#define ciot_sys_data_t_type_config_MSGTYPE ciot_sys_cfg_t
#define ciot_sys_data_t_type_status_MSGTYPE ciot_sys_status_t
#define ciot_sys_data_t_type_request_MSGTYPE ciot_sys_req_t
#define ciot_sys_data_t_type_info_MSGTYPE ciot_sys_info_t

extern const pb_msgdesc_t ciot_sys_stop_t_msg;
extern const pb_msgdesc_t ciot_sys_cfg_t_msg;
extern const pb_msgdesc_t ciot_sys_features_t_msg;
extern const pb_msgdesc_t ciot_sys_info_t_msg;
extern const pb_msgdesc_t ciot_sys_status_t_msg;
extern const pb_msgdesc_t ciot_sys_req_t_msg;
extern const pb_msgdesc_t ciot_sys_data_t_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define CIOT_SYS_STOP_FIELDS &ciot_sys_stop_t_msg
#define CIOT_SYS_CFG_FIELDS &ciot_sys_cfg_t_msg
#define CIOT_SYS_FEATURES_FIELDS &ciot_sys_features_t_msg
#define CIOT_SYS_INFO_FIELDS &ciot_sys_info_t_msg
#define CIOT_SYS_STATUS_FIELDS &ciot_sys_status_t_msg
#define CIOT_SYS_REQ_FIELDS &ciot_sys_req_t_msg
#define CIOT_SYS_DATA_FIELDS &ciot_sys_data_t_msg

/* Maximum encoded size of messages (where known) */
#define CIOT_CIOT_PROTO_V2_SYS_PB_H_MAX_SIZE     CIOT_SYS_DATA_SIZE
#define CIOT_SYS_CFG_SIZE                        0
#define CIOT_SYS_DATA_SIZE                       59
#define CIOT_SYS_FEATURES_SIZE                   30
#define CIOT_SYS_INFO_SIZE                       57
#define CIOT_SYS_REQ_SIZE                        2
#define CIOT_SYS_STATUS_SIZE                     24
#define CIOT_SYS_STOP_SIZE                       0

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
