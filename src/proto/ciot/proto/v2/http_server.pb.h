/* Automatically generated nanopb header */
/* Generated by nanopb-1.0.0-dev */

#ifndef PB_CIOT_CIOT_PROTO_V2_HTTP_SERVER_PB_H_INCLUDED
#define PB_CIOT_CIOT_PROTO_V2_HTTP_SERVER_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
/* Enum representing the state of the HTTP server. */
typedef enum ciot_http_server_state {
    CIOT_HTTP_SERVER_STATE_STOPPED = 0, /* The HTTP server is stopped. */
    CIOT_HTTP_SERVER_STATE_STARTED = 1, /* The HTTP server is started. */
    CIOT_HTTP_SERVER_STATE_ERROR = 2 /* The HTTP server encountered an error. */
} ciot_http_server_state_t;

/* Struct definitions */
/* Message used to stop HTTP server interface */
typedef struct ciot_http_server_stop {
    char dummy_field;
} ciot_http_server_stop_t;

/* Message representing HTTP server configuration. */
typedef struct ciot_http_server_cfg {
    char address[48]; /* Address of the HTTP server. */
    char route[32]; /* Route for the HTTP server. */
    uint32_t port; /* Port number for the HTTP server. */
    char root[32]; /* Server files root directory */
} ciot_http_server_cfg_t;

/* Message representing HTTP server status. */
typedef struct ciot_http_server_status {
    ciot_http_server_state_t state; /* State of the HTTP server. */
    int32_t error; /* Error code, if any. */
} ciot_http_server_status_t;

/* Message representing an HTTP server request. */
typedef struct ciot_http_server_req {
    char dummy_field;
} ciot_http_server_req_t;

/* Message representing HTTP server data. */
typedef struct ciot_http_server_data {
    pb_size_t which_type;
    union {
        ciot_http_server_stop_t stop; /* Stop HTTP server. */
        ciot_http_server_cfg_t config; /* Configuration for the HTTP server. */
        ciot_http_server_status_t status; /* Status of the HTTP server. */
        ciot_http_server_req_t request; /* HTTP server request data. */
    };
} ciot_http_server_data_t;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _CIOT_HTTP_SERVER_STATE_MIN CIOT_HTTP_SERVER_STATE_STOPPED
#define _CIOT_HTTP_SERVER_STATE_MAX CIOT_HTTP_SERVER_STATE_ERROR
#define _CIOT_HTTP_SERVER_STATE_ARRAYSIZE ((ciot_http_server_state_t)(CIOT_HTTP_SERVER_STATE_ERROR+1))
#define CIOT_HTTP_SERVER_STATE_HTTP_SERVER_STATE_STOPPED CIOT_HTTP_SERVER_STATE_STOPPED
#define CIOT_HTTP_SERVER_STATE_HTTP_SERVER_STATE_STARTED CIOT_HTTP_SERVER_STATE_STARTED
#define CIOT_HTTP_SERVER_STATE_HTTP_SERVER_STATE_ERROR CIOT_HTTP_SERVER_STATE_ERROR



#define ciot_http_server_status_t_state_ENUMTYPE ciot_http_server_state_t




/* Initializer values for message structs */
#define CIOT_HTTP_SERVER_STOP_INIT_DEFAULT       {0}
#define CIOT_HTTP_SERVER_CFG_INIT_DEFAULT        {"", "", 0, ""}
#define CIOT_HTTP_SERVER_STATUS_INIT_DEFAULT     {_CIOT_HTTP_SERVER_STATE_MIN, 0}
#define CIOT_HTTP_SERVER_REQ_INIT_DEFAULT        {0}
#define CIOT_HTTP_SERVER_DATA_INIT_DEFAULT       {0, {CIOT_HTTP_SERVER_STOP_INIT_DEFAULT}}
#define CIOT_HTTP_SERVER_STOP_INIT_ZERO          {0}
#define CIOT_HTTP_SERVER_CFG_INIT_ZERO           {"", "", 0, ""}
#define CIOT_HTTP_SERVER_STATUS_INIT_ZERO        {_CIOT_HTTP_SERVER_STATE_MIN, 0}
#define CIOT_HTTP_SERVER_REQ_INIT_ZERO           {0}
#define CIOT_HTTP_SERVER_DATA_INIT_ZERO          {0, {CIOT_HTTP_SERVER_STOP_INIT_ZERO}}

/* Field tags (for use in manual encoding/decoding) */
#define CIOT_HTTP_SERVER_CFG_ADDRESS_TAG         1
#define CIOT_HTTP_SERVER_CFG_ROUTE_TAG           2
#define CIOT_HTTP_SERVER_CFG_PORT_TAG            3
#define CIOT_HTTP_SERVER_CFG_ROOT_TAG            4
#define CIOT_HTTP_SERVER_STATUS_STATE_TAG        1
#define CIOT_HTTP_SERVER_STATUS_ERROR_TAG        2
#define CIOT_HTTP_SERVER_DATA_STOP_TAG           1
#define CIOT_HTTP_SERVER_DATA_CONFIG_TAG         2
#define CIOT_HTTP_SERVER_DATA_STATUS_TAG         3
#define CIOT_HTTP_SERVER_DATA_REQUEST_TAG        4

/* Struct field encoding specification for nanopb */
#define CIOT_HTTP_SERVER_STOP_FIELDLIST(X, a) \

#define CIOT_HTTP_SERVER_STOP_CALLBACK NULL
#define CIOT_HTTP_SERVER_STOP_DEFAULT NULL

#define CIOT_HTTP_SERVER_CFG_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, STRING,   address,           1) \
X(a, STATIC,   SINGULAR, STRING,   route,             2) \
X(a, STATIC,   SINGULAR, UINT32,   port,              3) \
X(a, STATIC,   SINGULAR, STRING,   root,              4)
#define CIOT_HTTP_SERVER_CFG_CALLBACK NULL
#define CIOT_HTTP_SERVER_CFG_DEFAULT NULL

#define CIOT_HTTP_SERVER_STATUS_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    state,             1) \
X(a, STATIC,   SINGULAR, INT32,    error,             2)
#define CIOT_HTTP_SERVER_STATUS_CALLBACK NULL
#define CIOT_HTTP_SERVER_STATUS_DEFAULT NULL

#define CIOT_HTTP_SERVER_REQ_FIELDLIST(X, a) \

#define CIOT_HTTP_SERVER_REQ_CALLBACK NULL
#define CIOT_HTTP_SERVER_REQ_DEFAULT NULL

#define CIOT_HTTP_SERVER_DATA_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    MESSAGE,  (type,stop,stop),   1) \
X(a, STATIC,   ONEOF,    MESSAGE,  (type,config,config),   2) \
X(a, STATIC,   ONEOF,    MESSAGE,  (type,status,status),   3) \
X(a, STATIC,   ONEOF,    MESSAGE,  (type,request,request),   4)
#define CIOT_HTTP_SERVER_DATA_CALLBACK NULL
#define CIOT_HTTP_SERVER_DATA_DEFAULT NULL
#define ciot_http_server_data_t_type_stop_MSGTYPE ciot_http_server_stop_t
#define ciot_http_server_data_t_type_config_MSGTYPE ciot_http_server_cfg_t
#define ciot_http_server_data_t_type_status_MSGTYPE ciot_http_server_status_t
#define ciot_http_server_data_t_type_request_MSGTYPE ciot_http_server_req_t

extern const pb_msgdesc_t ciot_http_server_stop_t_msg;
extern const pb_msgdesc_t ciot_http_server_cfg_t_msg;
extern const pb_msgdesc_t ciot_http_server_status_t_msg;
extern const pb_msgdesc_t ciot_http_server_req_t_msg;
extern const pb_msgdesc_t ciot_http_server_data_t_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define CIOT_HTTP_SERVER_STOP_FIELDS &ciot_http_server_stop_t_msg
#define CIOT_HTTP_SERVER_CFG_FIELDS &ciot_http_server_cfg_t_msg
#define CIOT_HTTP_SERVER_STATUS_FIELDS &ciot_http_server_status_t_msg
#define CIOT_HTTP_SERVER_REQ_FIELDS &ciot_http_server_req_t_msg
#define CIOT_HTTP_SERVER_DATA_FIELDS &ciot_http_server_data_t_msg

/* Maximum encoded size of messages (where known) */
#define CIOT_CIOT_PROTO_V2_HTTP_SERVER_PB_H_MAX_SIZE CIOT_HTTP_SERVER_DATA_SIZE
#define CIOT_HTTP_SERVER_CFG_SIZE                121
#define CIOT_HTTP_SERVER_DATA_SIZE               123
#define CIOT_HTTP_SERVER_REQ_SIZE                0
#define CIOT_HTTP_SERVER_STATUS_SIZE             13
#define CIOT_HTTP_SERVER_STOP_SIZE               0

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
