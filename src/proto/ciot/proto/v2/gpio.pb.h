/* Automatically generated nanopb header */
/* Generated by nanopb-1.0.0-dev */

#ifndef PB_CIOT_CIOT_PROTO_V2_GPIO_PB_H_INCLUDED
#define PB_CIOT_CIOT_PROTO_V2_GPIO_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
/* Enum representing the state of gpio */
typedef enum ciot_gpio_state {
    CIOT_GPIO_STATE_LOW = 0, /* Gpio is low */
    CIOT_GPIO_STATE_HIGH = 1, /* Gpio is high */
    CIOT_GPIO_STATE_BLINK = 2, /* Gpio is alternating it state once */
    CIOT_GPIO_STATE_BLINKED = 3, /* Gpio alternated it state once */
    CIOT_GPIO_STATE_BLINKING = 4, /* Gpio is alternating it state */
    CIOT_GPIO_STATE_ERROR = 5 /* Gpio is in error */
} ciot_gpio_state_t;

/* Enum representing gpio modes */
typedef enum ciot_gpio_mode {
    CIOT_GPIO_MODE_DISABLED = 0, /* Disable gpio */
    CIOT_GPIO_MODE_INPUT = 1, /* Enable gpio input mode */
    CIOT_GPIO_MODE_OUTPUT = 2 /* Enable gpio output mode */
} ciot_gpio_mode_t;

/* Enum representing gpio internal pullup/pulldown modes */
typedef enum ciot_gpio_pull {
    CIOT_GPIO_PULL_DISABLED = 0, /* Disable gpio internal pullup/pulldown */
    CIOT_GPIO_PULL_UP = 1, /* Enable gpio internal pullup */
    CIOT_GPIO_PULL_DOWN = 2 /* Enable gpio internal pulldown */
} ciot_gpio_pull_t;

/* Struct definitions */
/* Gpio pin configuration */
typedef struct ciot_gpio_pin_cfg {
    uint32_t num; /* Gpio pin number */
    ciot_gpio_mode_t mode; /* Gpio mode */
    ciot_gpio_pull_t pull; /* Gpio pullup/pulldown configuration */
} ciot_gpio_pin_cfg_t;

/* Message representing gpio configuration */
typedef struct ciot_gpio_cfg {
    pb_size_t pins_count;
    ciot_gpio_pin_cfg_t pins[16]; /* Pins list configuration */
    uint32_t blink_interval; /* Interval between gpio blinks in miliseconds */
} ciot_gpio_cfg_t;

/* Gpio stop message */
typedef struct ciot_gpio_stop {
    bool has_cfg;
    ciot_gpio_cfg_t cfg; /* Config of gpio to be stopped */
} ciot_gpio_stop_t;

/* Message used to read/set all gpio states */
typedef struct ciot_gpio_status {
    pb_byte_t states[16]; /* Gpio states list */
} ciot_gpio_status_t;

/* Message used to set/read signle gpio state info */
typedef struct ciot_gpio_state_info {
    uint32_t num; /* Gpio num */
    ciot_gpio_state_t state; /* Gpio state */
} ciot_gpio_state_info_t;

/* Message representing an gpio request */
typedef struct ciot_gpio_req {
    pb_size_t which_type;
    union {
        ciot_gpio_cfg_t config; /* Configuration request */
        ciot_gpio_status_t status; /* Status request. */
        ciot_gpio_state_info_t state; /* Set/read sate request */
    };
} ciot_gpio_req_t;

/* Message representing gpio data */
typedef struct ciot_gpio_data {
    pb_size_t which_type;
    union {
        ciot_gpio_stop_t stop; /* Stop gpio */
        ciot_gpio_cfg_t config; /* Configuration data */
        ciot_gpio_status_t status; /* Status data */
        ciot_gpio_req_t request; /* Request data */
    };
} ciot_gpio_data_t;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _CIOT_GPIO_STATE_MIN CIOT_GPIO_STATE_LOW
#define _CIOT_GPIO_STATE_MAX CIOT_GPIO_STATE_ERROR
#define _CIOT_GPIO_STATE_ARRAYSIZE ((ciot_gpio_state_t)(CIOT_GPIO_STATE_ERROR+1))
#define CIOT_GPIO_STATE_GPIO_STATE_LOW CIOT_GPIO_STATE_LOW
#define CIOT_GPIO_STATE_GPIO_STATE_HIGH CIOT_GPIO_STATE_HIGH
#define CIOT_GPIO_STATE_GPIO_STATE_BLINK CIOT_GPIO_STATE_BLINK
#define CIOT_GPIO_STATE_GPIO_STATE_BLINKED CIOT_GPIO_STATE_BLINKED
#define CIOT_GPIO_STATE_GPIO_STATE_BLINKING CIOT_GPIO_STATE_BLINKING
#define CIOT_GPIO_STATE_GPIO_STATE_ERROR CIOT_GPIO_STATE_ERROR

#define _CIOT_GPIO_MODE_MIN CIOT_GPIO_MODE_DISABLED
#define _CIOT_GPIO_MODE_MAX CIOT_GPIO_MODE_OUTPUT
#define _CIOT_GPIO_MODE_ARRAYSIZE ((ciot_gpio_mode_t)(CIOT_GPIO_MODE_OUTPUT+1))
#define CIOT_GPIO_MODE_GPIO_MODE_DISABLED CIOT_GPIO_MODE_DISABLED
#define CIOT_GPIO_MODE_GPIO_MODE_INPUT CIOT_GPIO_MODE_INPUT
#define CIOT_GPIO_MODE_GPIO_MODE_OUTPUT CIOT_GPIO_MODE_OUTPUT

#define _CIOT_GPIO_PULL_MIN CIOT_GPIO_PULL_DISABLED
#define _CIOT_GPIO_PULL_MAX CIOT_GPIO_PULL_DOWN
#define _CIOT_GPIO_PULL_ARRAYSIZE ((ciot_gpio_pull_t)(CIOT_GPIO_PULL_DOWN+1))
#define CIOT_GPIO_PULL_GPIO_PULL_DISABLED CIOT_GPIO_PULL_DISABLED
#define CIOT_GPIO_PULL_GPIO_PULL_UP CIOT_GPIO_PULL_UP
#define CIOT_GPIO_PULL_GPIO_PULL_DOWN CIOT_GPIO_PULL_DOWN


#define ciot_gpio_pin_cfg_t_mode_ENUMTYPE ciot_gpio_mode_t
#define ciot_gpio_pin_cfg_t_pull_ENUMTYPE ciot_gpio_pull_t



#define ciot_gpio_state_info_t_state_ENUMTYPE ciot_gpio_state_t




/* Initializer values for message structs */
#define CIOT_GPIO_STOP_INIT_DEFAULT              {false, CIOT_GPIO_CFG_INIT_DEFAULT}
#define CIOT_GPIO_PIN_CFG_INIT_DEFAULT           {0, _CIOT_GPIO_MODE_MIN, _CIOT_GPIO_PULL_MIN}
#define CIOT_GPIO_CFG_INIT_DEFAULT               {0, {CIOT_GPIO_PIN_CFG_INIT_DEFAULT, CIOT_GPIO_PIN_CFG_INIT_DEFAULT, CIOT_GPIO_PIN_CFG_INIT_DEFAULT, CIOT_GPIO_PIN_CFG_INIT_DEFAULT, CIOT_GPIO_PIN_CFG_INIT_DEFAULT, CIOT_GPIO_PIN_CFG_INIT_DEFAULT, CIOT_GPIO_PIN_CFG_INIT_DEFAULT, CIOT_GPIO_PIN_CFG_INIT_DEFAULT, CIOT_GPIO_PIN_CFG_INIT_DEFAULT, CIOT_GPIO_PIN_CFG_INIT_DEFAULT, CIOT_GPIO_PIN_CFG_INIT_DEFAULT, CIOT_GPIO_PIN_CFG_INIT_DEFAULT, CIOT_GPIO_PIN_CFG_INIT_DEFAULT, CIOT_GPIO_PIN_CFG_INIT_DEFAULT, CIOT_GPIO_PIN_CFG_INIT_DEFAULT, CIOT_GPIO_PIN_CFG_INIT_DEFAULT}, 0}
#define CIOT_GPIO_STATUS_INIT_DEFAULT            {{0}}
#define CIOT_GPIO_STATE_INFO_INIT_DEFAULT        {0, _CIOT_GPIO_STATE_MIN}
#define CIOT_GPIO_REQ_INIT_DEFAULT               {0, {CIOT_GPIO_CFG_INIT_DEFAULT}}
#define CIOT_GPIO_DATA_INIT_DEFAULT              {0, {CIOT_GPIO_STOP_INIT_DEFAULT}}
#define CIOT_GPIO_STOP_INIT_ZERO                 {false, CIOT_GPIO_CFG_INIT_ZERO}
#define CIOT_GPIO_PIN_CFG_INIT_ZERO              {0, _CIOT_GPIO_MODE_MIN, _CIOT_GPIO_PULL_MIN}
#define CIOT_GPIO_CFG_INIT_ZERO                  {0, {CIOT_GPIO_PIN_CFG_INIT_ZERO, CIOT_GPIO_PIN_CFG_INIT_ZERO, CIOT_GPIO_PIN_CFG_INIT_ZERO, CIOT_GPIO_PIN_CFG_INIT_ZERO, CIOT_GPIO_PIN_CFG_INIT_ZERO, CIOT_GPIO_PIN_CFG_INIT_ZERO, CIOT_GPIO_PIN_CFG_INIT_ZERO, CIOT_GPIO_PIN_CFG_INIT_ZERO, CIOT_GPIO_PIN_CFG_INIT_ZERO, CIOT_GPIO_PIN_CFG_INIT_ZERO, CIOT_GPIO_PIN_CFG_INIT_ZERO, CIOT_GPIO_PIN_CFG_INIT_ZERO, CIOT_GPIO_PIN_CFG_INIT_ZERO, CIOT_GPIO_PIN_CFG_INIT_ZERO, CIOT_GPIO_PIN_CFG_INIT_ZERO, CIOT_GPIO_PIN_CFG_INIT_ZERO}, 0}
#define CIOT_GPIO_STATUS_INIT_ZERO               {{0}}
#define CIOT_GPIO_STATE_INFO_INIT_ZERO           {0, _CIOT_GPIO_STATE_MIN}
#define CIOT_GPIO_REQ_INIT_ZERO                  {0, {CIOT_GPIO_CFG_INIT_ZERO}}
#define CIOT_GPIO_DATA_INIT_ZERO                 {0, {CIOT_GPIO_STOP_INIT_ZERO}}

/* Field tags (for use in manual encoding/decoding) */
#define CIOT_GPIO_PIN_CFG_NUM_TAG                1
#define CIOT_GPIO_PIN_CFG_MODE_TAG               2
#define CIOT_GPIO_PIN_CFG_PULL_TAG               3
#define CIOT_GPIO_CFG_PINS_TAG                   1
#define CIOT_GPIO_CFG_BLINK_INTERVAL_TAG         2
#define CIOT_GPIO_STOP_CFG_TAG                   1
#define CIOT_GPIO_STATUS_STATES_TAG              1
#define CIOT_GPIO_STATE_INFO_NUM_TAG             1
#define CIOT_GPIO_STATE_INFO_STATE_TAG           2
#define CIOT_GPIO_REQ_CONFIG_TAG                 2
#define CIOT_GPIO_REQ_STATUS_TAG                 3
#define CIOT_GPIO_REQ_STATE_TAG                  4
#define CIOT_GPIO_DATA_STOP_TAG                  1
#define CIOT_GPIO_DATA_CONFIG_TAG                2
#define CIOT_GPIO_DATA_STATUS_TAG                3
#define CIOT_GPIO_DATA_REQUEST_TAG               4

/* Struct field encoding specification for nanopb */
#define CIOT_GPIO_STOP_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  cfg,               1)
#define CIOT_GPIO_STOP_CALLBACK NULL
#define CIOT_GPIO_STOP_DEFAULT NULL
#define ciot_gpio_stop_t_cfg_MSGTYPE ciot_gpio_cfg_t

#define CIOT_GPIO_PIN_CFG_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   num,               1) \
X(a, STATIC,   SINGULAR, UENUM,    mode,              2) \
X(a, STATIC,   SINGULAR, UENUM,    pull,              3)
#define CIOT_GPIO_PIN_CFG_CALLBACK NULL
#define CIOT_GPIO_PIN_CFG_DEFAULT NULL

#define CIOT_GPIO_CFG_FIELDLIST(X, a) \
X(a, STATIC,   REPEATED, MESSAGE,  pins,              1) \
X(a, STATIC,   SINGULAR, UINT32,   blink_interval,    2)
#define CIOT_GPIO_CFG_CALLBACK NULL
#define CIOT_GPIO_CFG_DEFAULT NULL
#define ciot_gpio_cfg_t_pins_MSGTYPE ciot_gpio_pin_cfg_t

#define CIOT_GPIO_STATUS_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, FIXED_LENGTH_BYTES, states,            1)
#define CIOT_GPIO_STATUS_CALLBACK NULL
#define CIOT_GPIO_STATUS_DEFAULT NULL

#define CIOT_GPIO_STATE_INFO_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   num,               1) \
X(a, STATIC,   SINGULAR, UENUM,    state,             2)
#define CIOT_GPIO_STATE_INFO_CALLBACK NULL
#define CIOT_GPIO_STATE_INFO_DEFAULT NULL

#define CIOT_GPIO_REQ_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    MESSAGE,  (type,config,config),   2) \
X(a, STATIC,   ONEOF,    MESSAGE,  (type,status,status),   3) \
X(a, STATIC,   ONEOF,    MESSAGE,  (type,state,state),   4)
#define CIOT_GPIO_REQ_CALLBACK NULL
#define CIOT_GPIO_REQ_DEFAULT NULL
#define ciot_gpio_req_t_type_config_MSGTYPE ciot_gpio_cfg_t
#define ciot_gpio_req_t_type_status_MSGTYPE ciot_gpio_status_t
#define ciot_gpio_req_t_type_state_MSGTYPE ciot_gpio_state_info_t

#define CIOT_GPIO_DATA_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    MESSAGE,  (type,stop,stop),   1) \
X(a, STATIC,   ONEOF,    MESSAGE,  (type,config,config),   2) \
X(a, STATIC,   ONEOF,    MESSAGE,  (type,status,status),   3) \
X(a, STATIC,   ONEOF,    MESSAGE,  (type,request,request),   4)
#define CIOT_GPIO_DATA_CALLBACK NULL
#define CIOT_GPIO_DATA_DEFAULT NULL
#define ciot_gpio_data_t_type_stop_MSGTYPE ciot_gpio_stop_t
#define ciot_gpio_data_t_type_config_MSGTYPE ciot_gpio_cfg_t
#define ciot_gpio_data_t_type_status_MSGTYPE ciot_gpio_status_t
#define ciot_gpio_data_t_type_request_MSGTYPE ciot_gpio_req_t

extern const pb_msgdesc_t ciot_gpio_stop_t_msg;
extern const pb_msgdesc_t ciot_gpio_pin_cfg_t_msg;
extern const pb_msgdesc_t ciot_gpio_cfg_t_msg;
extern const pb_msgdesc_t ciot_gpio_status_t_msg;
extern const pb_msgdesc_t ciot_gpio_state_info_t_msg;
extern const pb_msgdesc_t ciot_gpio_req_t_msg;
extern const pb_msgdesc_t ciot_gpio_data_t_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define CIOT_GPIO_STOP_FIELDS &ciot_gpio_stop_t_msg
#define CIOT_GPIO_PIN_CFG_FIELDS &ciot_gpio_pin_cfg_t_msg
#define CIOT_GPIO_CFG_FIELDS &ciot_gpio_cfg_t_msg
#define CIOT_GPIO_STATUS_FIELDS &ciot_gpio_status_t_msg
#define CIOT_GPIO_STATE_INFO_FIELDS &ciot_gpio_state_info_t_msg
#define CIOT_GPIO_REQ_FIELDS &ciot_gpio_req_t_msg
#define CIOT_GPIO_DATA_FIELDS &ciot_gpio_data_t_msg

/* Maximum encoded size of messages (where known) */
#define CIOT_CIOT_PROTO_V2_GPIO_PB_H_MAX_SIZE    CIOT_GPIO_DATA_SIZE
#define CIOT_GPIO_CFG_SIZE                       198
#define CIOT_GPIO_DATA_SIZE                      204
#define CIOT_GPIO_PIN_CFG_SIZE                   10
#define CIOT_GPIO_REQ_SIZE                       201
#define CIOT_GPIO_STATE_INFO_SIZE                8
#define CIOT_GPIO_STATUS_SIZE                    18
#define CIOT_GPIO_STOP_SIZE                      201

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
