/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: ciot/proto/v1/ble.proto */

#ifndef PROTOBUF_C_ciot_2fproto_2fv1_2fble_2eproto__INCLUDED
#define PROTOBUF_C_ciot_2fproto_2fv1_2fble_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct Ciot__BleCfg Ciot__BleCfg;
typedef struct Ciot__BleInfo Ciot__BleInfo;
typedef struct Ciot__BleStatus Ciot__BleStatus;
typedef struct Ciot__BleReq Ciot__BleReq;
typedef struct Ciot__BleData Ciot__BleData;


/* --- enums --- */

/*
 * Possible ble states
 */
typedef enum _Ciot__BleState {
  /*
   * Idle state
   */
  CIOT__BLE_STATE__BLE_STATE_IDLE = 0,
  /*
   * Bluetooth module started
   */
  CIOT__BLE_STATE__BLE_STATE_STARTED = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CIOT__BLE_STATE)
} Ciot__BleState;
/*
 * Ble request types
 */
typedef enum _Ciot__BleReqType {
  /*
   * Unknown request type
   */
  CIOT__BLE_REQ_TYPE__BLE_REQ_TYPE_UNKOWN = 0,
  /*
   * Assign mac address to bluetooth module
   */
  CIOT__BLE_REQ_TYPE__BLE_REQ_TYPE_SET_MAC = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CIOT__BLE_REQ_TYPE)
} Ciot__BleReqType;

/* --- messages --- */

/*
 * Bluetooth module configuration
 */
struct  Ciot__BleCfg
{
  ProtobufCMessage base;
  /*
   * Mac address. If empty, is ignored, and the hardware mac
   */
  ProtobufCBinaryData mac;
};
#define CIOT__BLE_CFG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ciot__ble_cfg__descriptor) \
    , {0,NULL} }


/*
 * Bluetooth module information
 */
struct  Ciot__BleInfo
{
  ProtobufCMessage base;
  /*
   * Hardware mac address
   */
  ProtobufCBinaryData hw_mac;
  /*
   * Software mac address
   */
  ProtobufCBinaryData sw_mac;
};
#define CIOT__BLE_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ciot__ble_info__descriptor) \
    , {0,NULL}, {0,NULL} }


/*
 * Bluetooth module status
 */
struct  Ciot__BleStatus
{
  ProtobufCMessage base;
  /*
   * Current state
   */
  Ciot__BleState state;
  /*
   * Current error code
   */
  int32_t err_code;
  /*
   * Software mac assigned
   */
  protobuf_c_boolean using_sw_mac;
};
#define CIOT__BLE_STATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ciot__ble_status__descriptor) \
    , CIOT__BLE_STATE__BLE_STATE_IDLE, 0, 0 }


/*
 * Bluetooth module request
 */
struct  Ciot__BleReq
{
  ProtobufCMessage base;
  /*
   * Request type
   */
  Ciot__BleReqType type;
  /*
   * Assign mac request
   */
  ProtobufCBinaryData set_mac;
};
#define CIOT__BLE_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ciot__ble_req__descriptor) \
    , CIOT__BLE_REQ_TYPE__BLE_REQ_TYPE_UNKOWN, {0,NULL} }


/*
 * Bluetooth module data
 */
struct  Ciot__BleData
{
  ProtobufCMessage base;
  Ciot__BleCfg *config;
  Ciot__BleStatus *status;
  Ciot__BleReq *request;
  Ciot__BleInfo *info;
};
#define CIOT__BLE_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ciot__ble_data__descriptor) \
    , NULL, NULL, NULL, NULL }


/* Ciot__BleCfg methods */
void   ciot__ble_cfg__init
                     (Ciot__BleCfg         *message);
size_t ciot__ble_cfg__get_packed_size
                     (const Ciot__BleCfg   *message);
size_t ciot__ble_cfg__pack
                     (const Ciot__BleCfg   *message,
                      uint8_t             *out);
size_t ciot__ble_cfg__pack_to_buffer
                     (const Ciot__BleCfg   *message,
                      ProtobufCBuffer     *buffer);
Ciot__BleCfg *
       ciot__ble_cfg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ciot__ble_cfg__free_unpacked
                     (Ciot__BleCfg *message,
                      ProtobufCAllocator *allocator);
/* Ciot__BleInfo methods */
void   ciot__ble_info__init
                     (Ciot__BleInfo         *message);
size_t ciot__ble_info__get_packed_size
                     (const Ciot__BleInfo   *message);
size_t ciot__ble_info__pack
                     (const Ciot__BleInfo   *message,
                      uint8_t             *out);
size_t ciot__ble_info__pack_to_buffer
                     (const Ciot__BleInfo   *message,
                      ProtobufCBuffer     *buffer);
Ciot__BleInfo *
       ciot__ble_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ciot__ble_info__free_unpacked
                     (Ciot__BleInfo *message,
                      ProtobufCAllocator *allocator);
/* Ciot__BleStatus methods */
void   ciot__ble_status__init
                     (Ciot__BleStatus         *message);
size_t ciot__ble_status__get_packed_size
                     (const Ciot__BleStatus   *message);
size_t ciot__ble_status__pack
                     (const Ciot__BleStatus   *message,
                      uint8_t             *out);
size_t ciot__ble_status__pack_to_buffer
                     (const Ciot__BleStatus   *message,
                      ProtobufCBuffer     *buffer);
Ciot__BleStatus *
       ciot__ble_status__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ciot__ble_status__free_unpacked
                     (Ciot__BleStatus *message,
                      ProtobufCAllocator *allocator);
/* Ciot__BleReq methods */
void   ciot__ble_req__init
                     (Ciot__BleReq         *message);
size_t ciot__ble_req__get_packed_size
                     (const Ciot__BleReq   *message);
size_t ciot__ble_req__pack
                     (const Ciot__BleReq   *message,
                      uint8_t             *out);
size_t ciot__ble_req__pack_to_buffer
                     (const Ciot__BleReq   *message,
                      ProtobufCBuffer     *buffer);
Ciot__BleReq *
       ciot__ble_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ciot__ble_req__free_unpacked
                     (Ciot__BleReq *message,
                      ProtobufCAllocator *allocator);
/* Ciot__BleData methods */
void   ciot__ble_data__init
                     (Ciot__BleData         *message);
size_t ciot__ble_data__get_packed_size
                     (const Ciot__BleData   *message);
size_t ciot__ble_data__pack
                     (const Ciot__BleData   *message,
                      uint8_t             *out);
size_t ciot__ble_data__pack_to_buffer
                     (const Ciot__BleData   *message,
                      ProtobufCBuffer     *buffer);
Ciot__BleData *
       ciot__ble_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ciot__ble_data__free_unpacked
                     (Ciot__BleData *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Ciot__BleCfg_Closure)
                 (const Ciot__BleCfg *message,
                  void *closure_data);
typedef void (*Ciot__BleInfo_Closure)
                 (const Ciot__BleInfo *message,
                  void *closure_data);
typedef void (*Ciot__BleStatus_Closure)
                 (const Ciot__BleStatus *message,
                  void *closure_data);
typedef void (*Ciot__BleReq_Closure)
                 (const Ciot__BleReq *message,
                  void *closure_data);
typedef void (*Ciot__BleData_Closure)
                 (const Ciot__BleData *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    ciot__ble_state__descriptor;
extern const ProtobufCEnumDescriptor    ciot__ble_req_type__descriptor;
extern const ProtobufCMessageDescriptor ciot__ble_cfg__descriptor;
extern const ProtobufCMessageDescriptor ciot__ble_info__descriptor;
extern const ProtobufCMessageDescriptor ciot__ble_status__descriptor;
extern const ProtobufCMessageDescriptor ciot__ble_req__descriptor;
extern const ProtobufCMessageDescriptor ciot__ble_data__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_ciot_2fproto_2fv1_2fble_2eproto__INCLUDED */
