/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: ciot/proto/v1/ota.proto */

#ifndef PROTOBUF_C_ciot_2fproto_2fv1_2fota_2eproto__INCLUDED
#define PROTOBUF_C_ciot_2fproto_2fv1_2fota_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct Ciot__OtaCfg Ciot__OtaCfg;
typedef struct Ciot__OtaStatus Ciot__OtaStatus;
typedef struct Ciot__OtaReqData Ciot__OtaReqData;
typedef struct Ciot__OtaReq Ciot__OtaReq;
typedef struct Ciot__OtaData Ciot__OtaData;


/* --- enums --- */

/*
 * Enum representing the different OTA types
 */
typedef enum _Ciot__OtaType {
  /*
   * Default OTA type used do update firmware
   */
  CIOT__OTA_TYPE__OTA_TYPE_DEFAULT = 0,
  /*
   * Data SPIFFS OTA type used to update data spiffs partition
   */
  CIOT__OTA_TYPE__OTA_TYPE_DATA_SPIFFS = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CIOT__OTA_TYPE)
} Ciot__OtaType;
/*
 * Enum representing the state of the OTA (Over-the-Air) update process.
 */
typedef enum _Ciot__OtaState {
  /*
   * OTA process is idle.
   */
  CIOT__OTA_STATE__OTA_STATE_IDLE = 0,
  /*
   * OTA process is initialized.
   */
  CIOT__OTA_STATE__OTA_STATE_INIT = 1,
  /*
   * OTA process is in progress.
   */
  CIOT__OTA_STATE__OTA_STATE_IN_PROGRESS = 2,
  /*
   * OTA process is starting.
   */
  CIOT__OTA_STATE__OTA_STATE_START = 3,
  /*
   * OTA process is connected.
   */
  CIOT__OTA_STATE__OTA_STATE_CONNECTED = 4,
  /*
   * OTA process is checking data.
   */
  CIOT__OTA_STATE__OTA_STATE_CHECKING_DATA = 5,
  /*
   * OTA process is decrypting data.
   */
  CIOT__OTA_STATE__OTA_STATE_DECRYPTING = 6,
  /*
   * OTA process is flashing data.
   */
  CIOT__OTA_STATE__OTA_STATE_FLASHING = 7,
  /*
   * OTA process is updating boot partition.
   */
  CIOT__OTA_STATE__OTA_STATE_UPDATE_BOOT_PARTITION = 8,
  /*
   * OTA process is done.
   */
  CIOT__OTA_STATE__OTA_STATE_STATE_DONE = 9,
  /*
   * OTA process encountered an error.
   */
  CIOT__OTA_STATE__OTA_STATE_ERROR = 10
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CIOT__OTA_STATE)
} Ciot__OtaState;
/*
 * Enum representing different types of OTA requests.
 */
typedef enum _Ciot__OtaReqType {
  /*
   * Unknown OTA request type.
   */
  CIOT__OTA_REQ_TYPE__OTA_REQ_TYPE_UNKOWN = 0,
  /*
   * Rollback
   */
  CIOT__OTA_REQ_TYPE__OTA_REQ_TYPE_ROLLBACK = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CIOT__OTA_REQ_TYPE)
} Ciot__OtaReqType;

/* --- messages --- */

/*
 * Message representing configuration for the OTA process.
 */
struct  Ciot__OtaCfg
{
  ProtobufCMessage base;
  /*
   * URL for the OTA update.
   */
  char *url;
  /*
   * Force OTA update.
   */
  protobuf_c_boolean force;
  /*
   * Encrypted OTA update.
   */
  protobuf_c_boolean encrypted;
  /*
   * Restart device after OTA update.
   */
  protobuf_c_boolean restart;
  /*
   * OTA type
   */
  Ciot__OtaType type;
};
#define CIOT__OTA_CFG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ciot__ota_cfg__descriptor) \
    , (char *)protobuf_c_empty_string, 0, 0, 0, CIOT__OTA_TYPE__OTA_TYPE_DEFAULT }


/*
 * Message representing status for the OTA process.
 */
struct  Ciot__OtaStatus
{
  ProtobufCMessage base;
  /*
   * State of the OTA process.
   */
  Ciot__OtaState state;
  /*
   * Error code, if any.
   */
  int32_t error;
  /*
   * Size of the OTA image.
   */
  uint32_t image_size;
  /*
   * Size of the OTA image already read.
   */
  uint32_t image_written;
};
#define CIOT__OTA_STATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ciot__ota_status__descriptor) \
    , CIOT__OTA_STATE__OTA_STATE_IDLE, 0, 0, 0 }


/*
 * Message representing data for an OTA request.
 */
struct  Ciot__OtaReqData
{
  ProtobufCMessage base;
};
#define CIOT__OTA_REQ_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ciot__ota_req_data__descriptor) \
     }


/*
 * Message representing an OTA request.
 */
struct  Ciot__OtaReq
{
  ProtobufCMessage base;
  /*
   * Type of the OTA request.
   */
  Ciot__OtaReqType type;
  /*
   * Data associated with the request.
   */
  Ciot__OtaReqData *data;
};
#define CIOT__OTA_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ciot__ota_req__descriptor) \
    , CIOT__OTA_REQ_TYPE__OTA_REQ_TYPE_UNKOWN, NULL }


/*
 * Message representing data for the OTA process.
 */
struct  Ciot__OtaData
{
  ProtobufCMessage base;
  /*
   * Configuration for the OTA process.
   */
  Ciot__OtaCfg *config;
  /*
   * Status of the OTA process.
   */
  Ciot__OtaStatus *status;
  /*
   * OTA request data.
   */
  Ciot__OtaReq *request;
};
#define CIOT__OTA_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ciot__ota_data__descriptor) \
    , NULL, NULL, NULL }


/* Ciot__OtaCfg methods */
void   ciot__ota_cfg__init
                     (Ciot__OtaCfg         *message);
size_t ciot__ota_cfg__get_packed_size
                     (const Ciot__OtaCfg   *message);
size_t ciot__ota_cfg__pack
                     (const Ciot__OtaCfg   *message,
                      uint8_t             *out);
size_t ciot__ota_cfg__pack_to_buffer
                     (const Ciot__OtaCfg   *message,
                      ProtobufCBuffer     *buffer);
Ciot__OtaCfg *
       ciot__ota_cfg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ciot__ota_cfg__free_unpacked
                     (Ciot__OtaCfg *message,
                      ProtobufCAllocator *allocator);
/* Ciot__OtaStatus methods */
void   ciot__ota_status__init
                     (Ciot__OtaStatus         *message);
size_t ciot__ota_status__get_packed_size
                     (const Ciot__OtaStatus   *message);
size_t ciot__ota_status__pack
                     (const Ciot__OtaStatus   *message,
                      uint8_t             *out);
size_t ciot__ota_status__pack_to_buffer
                     (const Ciot__OtaStatus   *message,
                      ProtobufCBuffer     *buffer);
Ciot__OtaStatus *
       ciot__ota_status__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ciot__ota_status__free_unpacked
                     (Ciot__OtaStatus *message,
                      ProtobufCAllocator *allocator);
/* Ciot__OtaReqData methods */
void   ciot__ota_req_data__init
                     (Ciot__OtaReqData         *message);
size_t ciot__ota_req_data__get_packed_size
                     (const Ciot__OtaReqData   *message);
size_t ciot__ota_req_data__pack
                     (const Ciot__OtaReqData   *message,
                      uint8_t             *out);
size_t ciot__ota_req_data__pack_to_buffer
                     (const Ciot__OtaReqData   *message,
                      ProtobufCBuffer     *buffer);
Ciot__OtaReqData *
       ciot__ota_req_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ciot__ota_req_data__free_unpacked
                     (Ciot__OtaReqData *message,
                      ProtobufCAllocator *allocator);
/* Ciot__OtaReq methods */
void   ciot__ota_req__init
                     (Ciot__OtaReq         *message);
size_t ciot__ota_req__get_packed_size
                     (const Ciot__OtaReq   *message);
size_t ciot__ota_req__pack
                     (const Ciot__OtaReq   *message,
                      uint8_t             *out);
size_t ciot__ota_req__pack_to_buffer
                     (const Ciot__OtaReq   *message,
                      ProtobufCBuffer     *buffer);
Ciot__OtaReq *
       ciot__ota_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ciot__ota_req__free_unpacked
                     (Ciot__OtaReq *message,
                      ProtobufCAllocator *allocator);
/* Ciot__OtaData methods */
void   ciot__ota_data__init
                     (Ciot__OtaData         *message);
size_t ciot__ota_data__get_packed_size
                     (const Ciot__OtaData   *message);
size_t ciot__ota_data__pack
                     (const Ciot__OtaData   *message,
                      uint8_t             *out);
size_t ciot__ota_data__pack_to_buffer
                     (const Ciot__OtaData   *message,
                      ProtobufCBuffer     *buffer);
Ciot__OtaData *
       ciot__ota_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ciot__ota_data__free_unpacked
                     (Ciot__OtaData *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Ciot__OtaCfg_Closure)
                 (const Ciot__OtaCfg *message,
                  void *closure_data);
typedef void (*Ciot__OtaStatus_Closure)
                 (const Ciot__OtaStatus *message,
                  void *closure_data);
typedef void (*Ciot__OtaReqData_Closure)
                 (const Ciot__OtaReqData *message,
                  void *closure_data);
typedef void (*Ciot__OtaReq_Closure)
                 (const Ciot__OtaReq *message,
                  void *closure_data);
typedef void (*Ciot__OtaData_Closure)
                 (const Ciot__OtaData *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    ciot__ota_type__descriptor;
extern const ProtobufCEnumDescriptor    ciot__ota_state__descriptor;
extern const ProtobufCEnumDescriptor    ciot__ota_req_type__descriptor;
extern const ProtobufCMessageDescriptor ciot__ota_cfg__descriptor;
extern const ProtobufCMessageDescriptor ciot__ota_status__descriptor;
extern const ProtobufCMessageDescriptor ciot__ota_req_data__descriptor;
extern const ProtobufCMessageDescriptor ciot__ota_req__descriptor;
extern const ProtobufCMessageDescriptor ciot__ota_data__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_ciot_2fproto_2fv1_2fota_2eproto__INCLUDED */
