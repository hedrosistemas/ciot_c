/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: ciot/proto/v1/iota.proto */

#ifndef PROTOBUF_C_ciot_2fproto_2fv1_2fiota_2eproto__INCLUDED
#define PROTOBUF_C_ciot_2fproto_2fv1_2fiota_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "ciot/proto/v1/sys.pb-c.h"

typedef struct Ciot__IOtaCfg Ciot__IOtaCfg;
typedef struct Ciot__IOtaStatus Ciot__IOtaStatus;
typedef struct Ciot__IOtaReqBegin Ciot__IOtaReqBegin;
typedef struct Ciot__IOtaReqWrite Ciot__IOtaReqWrite;
typedef struct Ciot__IOtaData Ciot__IOtaData;


/* --- enums --- */

/*
 * Enum representing the different IOTA types
 */
typedef enum _Ciot__IOtaType {
  /*
   * Default IOTA type used do update firmware
   */
  CIOT__IOTA_TYPE__IOTA_TYPE_DEFAULT = 0,
  /*
   * Data SPIFFS OTA type used to update data spiffs partition
   */
  CIOT__IOTA_TYPE__IOTA_TYPE_DATA_SPIFFS = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CIOT__IOTA_TYPE)
} Ciot__IOtaType;
/*
 * Enum representing the state of the IOTA (Over-the-Air) update process.
 */
typedef enum _Ciot__IOtaState {
  /*
   * IOTA process is idle.
   */
  CIOT__IOTA_STATE__IOTA_STATE_IDLE = 0
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CIOT__IOTA_STATE)
} Ciot__IOtaState;

/* --- messages --- */

/*
 * Message representing configuration for the IOTA process.
 */
struct  Ciot__IOtaCfg
{
  ProtobufCMessage base;
  /*
   * IOTA type
   */
  Ciot__IOtaType type;
};
#define CIOT__IOTA_CFG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ciot__iota_cfg__descriptor) \
    , CIOT__IOTA_TYPE__IOTA_TYPE_DEFAULT }


/*
 * Message representing status for the IOTA process.
 */
struct  Ciot__IOtaStatus
{
  ProtobufCMessage base;
  /*
   * State of the IOTA process.
   */
  Ciot__IOtaState state;
  /*
   * Error code, if any.
   */
  int32_t error;
  /*
   * Size of the IOTA image.
   */
  uint32_t image_size;
  /*
   * Size of the IOTA image already read.
   */
  uint32_t image_written;
};
#define CIOT__IOTA_STATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ciot__iota_status__descriptor) \
    , CIOT__IOTA_STATE__IOTA_STATE_IDLE, 0, 0, 0 }


struct  Ciot__IOtaReqBegin
{
  ProtobufCMessage base;
  Ciot__SysInfo *sys_info;
};
#define CIOT__IOTA_REQ_BEGIN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ciot__iota_req_begin__descriptor) \
    , NULL }


/*
 * Message used by IOTA to update image using an existent interface
 */
struct  Ciot__IOtaReqWrite
{
  ProtobufCMessage base;
  uint32_t packet_id;
  uint32_t packet_count;
  ProtobufCBinaryData packet;
};
#define CIOT__IOTA_REQ_WRITE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ciot__iota_req_write__descriptor) \
    , 0, 0, {0,NULL} }


typedef enum {
  CIOT__IOTA_DATA__REQUEST__NOT_SET = 0,
  CIOT__IOTA_DATA__REQUEST_IOTA_WRITE = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CIOT__IOTA_DATA__REQUEST__CASE)
} Ciot__IOtaData__RequestCase;

/*
 * Message representing data for the IOTA process.
 */
struct  Ciot__IOtaData
{
  ProtobufCMessage base;
  /*
   * Configuration for the IOTA process.
   */
  Ciot__IOtaCfg *config;
  /*
   * Status of the IOTA process.
   */
  Ciot__IOtaStatus *status;
  Ciot__IOtaData__RequestCase request_case;
  union {
    /*
     * IOTA write request          
     */
    Ciot__IOtaReqWrite *iota_write;
  };
};
#define CIOT__IOTA_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ciot__iota_data__descriptor) \
    , NULL, NULL, CIOT__IOTA_DATA__REQUEST__NOT_SET, {0} }


/* Ciot__IOtaCfg methods */
void   ciot__iota_cfg__init
                     (Ciot__IOtaCfg         *message);
size_t ciot__iota_cfg__get_packed_size
                     (const Ciot__IOtaCfg   *message);
size_t ciot__iota_cfg__pack
                     (const Ciot__IOtaCfg   *message,
                      uint8_t             *out);
size_t ciot__iota_cfg__pack_to_buffer
                     (const Ciot__IOtaCfg   *message,
                      ProtobufCBuffer     *buffer);
Ciot__IOtaCfg *
       ciot__iota_cfg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ciot__iota_cfg__free_unpacked
                     (Ciot__IOtaCfg *message,
                      ProtobufCAllocator *allocator);
/* Ciot__IOtaStatus methods */
void   ciot__iota_status__init
                     (Ciot__IOtaStatus         *message);
size_t ciot__iota_status__get_packed_size
                     (const Ciot__IOtaStatus   *message);
size_t ciot__iota_status__pack
                     (const Ciot__IOtaStatus   *message,
                      uint8_t             *out);
size_t ciot__iota_status__pack_to_buffer
                     (const Ciot__IOtaStatus   *message,
                      ProtobufCBuffer     *buffer);
Ciot__IOtaStatus *
       ciot__iota_status__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ciot__iota_status__free_unpacked
                     (Ciot__IOtaStatus *message,
                      ProtobufCAllocator *allocator);
/* Ciot__IOtaReqBegin methods */
void   ciot__iota_req_begin__init
                     (Ciot__IOtaReqBegin         *message);
size_t ciot__iota_req_begin__get_packed_size
                     (const Ciot__IOtaReqBegin   *message);
size_t ciot__iota_req_begin__pack
                     (const Ciot__IOtaReqBegin   *message,
                      uint8_t             *out);
size_t ciot__iota_req_begin__pack_to_buffer
                     (const Ciot__IOtaReqBegin   *message,
                      ProtobufCBuffer     *buffer);
Ciot__IOtaReqBegin *
       ciot__iota_req_begin__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ciot__iota_req_begin__free_unpacked
                     (Ciot__IOtaReqBegin *message,
                      ProtobufCAllocator *allocator);
/* Ciot__IOtaReqWrite methods */
void   ciot__iota_req_write__init
                     (Ciot__IOtaReqWrite         *message);
size_t ciot__iota_req_write__get_packed_size
                     (const Ciot__IOtaReqWrite   *message);
size_t ciot__iota_req_write__pack
                     (const Ciot__IOtaReqWrite   *message,
                      uint8_t             *out);
size_t ciot__iota_req_write__pack_to_buffer
                     (const Ciot__IOtaReqWrite   *message,
                      ProtobufCBuffer     *buffer);
Ciot__IOtaReqWrite *
       ciot__iota_req_write__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ciot__iota_req_write__free_unpacked
                     (Ciot__IOtaReqWrite *message,
                      ProtobufCAllocator *allocator);
/* Ciot__IOtaData methods */
void   ciot__iota_data__init
                     (Ciot__IOtaData         *message);
size_t ciot__iota_data__get_packed_size
                     (const Ciot__IOtaData   *message);
size_t ciot__iota_data__pack
                     (const Ciot__IOtaData   *message,
                      uint8_t             *out);
size_t ciot__iota_data__pack_to_buffer
                     (const Ciot__IOtaData   *message,
                      ProtobufCBuffer     *buffer);
Ciot__IOtaData *
       ciot__iota_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ciot__iota_data__free_unpacked
                     (Ciot__IOtaData *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Ciot__IOtaCfg_Closure)
                 (const Ciot__IOtaCfg *message,
                  void *closure_data);
typedef void (*Ciot__IOtaStatus_Closure)
                 (const Ciot__IOtaStatus *message,
                  void *closure_data);
typedef void (*Ciot__IOtaReqBegin_Closure)
                 (const Ciot__IOtaReqBegin *message,
                  void *closure_data);
typedef void (*Ciot__IOtaReqWrite_Closure)
                 (const Ciot__IOtaReqWrite *message,
                  void *closure_data);
typedef void (*Ciot__IOtaData_Closure)
                 (const Ciot__IOtaData *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    ciot__iota_type__descriptor;
extern const ProtobufCEnumDescriptor    ciot__iota_state__descriptor;
extern const ProtobufCMessageDescriptor ciot__iota_cfg__descriptor;
extern const ProtobufCMessageDescriptor ciot__iota_status__descriptor;
extern const ProtobufCMessageDescriptor ciot__iota_req_begin__descriptor;
extern const ProtobufCMessageDescriptor ciot__iota_req_write__descriptor;
extern const ProtobufCMessageDescriptor ciot__iota_data__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_ciot_2fproto_2fv1_2fiota_2eproto__INCLUDED */
