/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: ciot/proto/v1/uart.proto */

#ifndef PROTOBUF_C_ciot_2fproto_2fv1_2fuart_2eproto__INCLUDED
#define PROTOBUF_C_ciot_2fproto_2fv1_2fuart_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct Ciot__UartCfg Ciot__UartCfg;
typedef struct Ciot__UartStatus Ciot__UartStatus;
typedef struct Ciot__UartReq Ciot__UartReq;
typedef struct Ciot__UartData Ciot__UartData;


/* --- enums --- */

/*
 * Enum representing the state of the UART module.
 */
typedef enum _Ciot__UartState {
  /*
   * UART is closed.
   */
  CIOT__UART_STATE__UART_STATE_CLOSED = 0,
  /*
   * UART is started.
   */
  CIOT__UART_STATE__UART_STATE_STARTED = 1,
  /*
   * UART encountered an internal error.
   */
  CIOT__UART_STATE__UART_STATE_INTERNAL_ERROR = 2,
  /*
   * UART encountered a CIOT-S (Custom IoT System) error.
   */
  CIOT__UART_STATE__UART_STATE_CIOT_S_ERROR = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CIOT__UART_STATE)
} Ciot__UartState;
/*
 * Enum representing different types of UART requests.
 */
typedef enum _Ciot__UartReqType {
  /*
   * Unknown UART request type.
   */
  CIOT__UART_REQ_TYPE__UART_REQ_TYPE_UNKOWN = 0,
  /*
   * Request to send data via UART.
   */
  CIOT__UART_REQ_TYPE__UART_REQ_TYPE_SEND_DATA = 1,
  /*
   * Request to send bytes via UART.
   */
  CIOT__UART_REQ_TYPE__UART_REQ_TYPE_SEND_BYTES = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CIOT__UART_REQ_TYPE)
} Ciot__UartReqType;
/*
 * Enum representing different UART error types.
 */
typedef enum _Ciot__UartError {
  /*
   * No UART error.
   */
  CIOT__UART_ERROR__UART_ERR_NONE = 0,
  /*
   * UART break error.
   */
  CIOT__UART_ERROR__UART_ERR_BREAK = 1,
  /*
   * UART buffer full error.
   */
  CIOT__UART_ERROR__UART_ERR_BUFFER_FULL = 2,
  /*
   * UART FIFO overflow error.
   */
  CIOT__UART_ERROR__UART_ERR_FIFO_OVERFLOW = 3,
  /*
   * UART frame error.
   */
  CIOT__UART_ERROR__UART_ERR_FRAME = 4,
  /*
   * UART parity error.
   */
  CIOT__UART_ERROR__UART_ERR_PARITY = 5,
  /*
   * UART data break error.
   */
  CIOT__UART_ERROR__UART_ERR_DATA_BREAK = 6,
  /*
   * UART open error.
   */
  CIOT__UART_ERROR__UART_ERR_OPEN = 8,
  /*
   * Unknown UART event error.
   */
  CIOT__UART_ERROR__UART_ERR_UNKNOWN_EVENT = -1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CIOT__UART_ERROR)
} Ciot__UartError;

/* --- messages --- */

/*
 * Message representing configuration for the UART module.
 */
struct  Ciot__UartCfg
{
  ProtobufCMessage base;
  /*
   * Baud rate for UART.
   */
  int32_t baud_rate;
  /*
   * UART number.
   */
  int32_t num;
  /*
   * RX pin number.
   */
  int32_t rx_pin;
  /*
   * TX pin number.
   */
  int32_t tx_pin;
  /*
   * RTS pin number.
   */
  int32_t rts_pin;
  /*
   * CTS pin number.
   */
  int32_t cts_pin;
  /*
   * Parity for UART.
   */
  int32_t parity;
  /*
   * Flow control for UART.
   */
  protobuf_c_boolean flow_control;
  /*
   * DTR (Data Terminal Ready) signal.
   */
  protobuf_c_boolean dtr;
  /*
   * Bridge mode for UART.
   */
  protobuf_c_boolean bridge_mode;
};
#define CIOT__UART_CFG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ciot__uart_cfg__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


/*
 * Message representing status for the UART module.
 */
struct  Ciot__UartStatus
{
  ProtobufCMessage base;
  /*
   * State of the UART module.
   */
  Ciot__UartState state;
  /*
   * Error encountered by the UART module.
   */
  Ciot__UartError error;
};
#define CIOT__UART_STATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ciot__uart_status__descriptor) \
    , CIOT__UART_STATE__UART_STATE_CLOSED, CIOT__UART_ERROR__UART_ERR_NONE }


/*
 * Message representing a UART request.
 */
struct  Ciot__UartReq
{
  ProtobufCMessage base;
  /*
   * Type of the UART request.
   */
  Ciot__UartReqType type;
  /*
   * Data associated with the UART request.
   */
  ProtobufCBinaryData data;
};
#define CIOT__UART_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ciot__uart_req__descriptor) \
    , CIOT__UART_REQ_TYPE__UART_REQ_TYPE_UNKOWN, {0,NULL} }


/*
 * Message representing data for the UART module.
 */
struct  Ciot__UartData
{
  ProtobufCMessage base;
  /*
   * Configuration for the UART module.
   */
  Ciot__UartCfg *config;
  /*
   * Status of the UART module.
   */
  Ciot__UartStatus *status;
  /*
   * UART request data.
   */
  Ciot__UartReq *request;
};
#define CIOT__UART_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ciot__uart_data__descriptor) \
    , NULL, NULL, NULL }


/* Ciot__UartCfg methods */
void   ciot__uart_cfg__init
                     (Ciot__UartCfg         *message);
size_t ciot__uart_cfg__get_packed_size
                     (const Ciot__UartCfg   *message);
size_t ciot__uart_cfg__pack
                     (const Ciot__UartCfg   *message,
                      uint8_t             *out);
size_t ciot__uart_cfg__pack_to_buffer
                     (const Ciot__UartCfg   *message,
                      ProtobufCBuffer     *buffer);
Ciot__UartCfg *
       ciot__uart_cfg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ciot__uart_cfg__free_unpacked
                     (Ciot__UartCfg *message,
                      ProtobufCAllocator *allocator);
/* Ciot__UartStatus methods */
void   ciot__uart_status__init
                     (Ciot__UartStatus         *message);
size_t ciot__uart_status__get_packed_size
                     (const Ciot__UartStatus   *message);
size_t ciot__uart_status__pack
                     (const Ciot__UartStatus   *message,
                      uint8_t             *out);
size_t ciot__uart_status__pack_to_buffer
                     (const Ciot__UartStatus   *message,
                      ProtobufCBuffer     *buffer);
Ciot__UartStatus *
       ciot__uart_status__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ciot__uart_status__free_unpacked
                     (Ciot__UartStatus *message,
                      ProtobufCAllocator *allocator);
/* Ciot__UartReq methods */
void   ciot__uart_req__init
                     (Ciot__UartReq         *message);
size_t ciot__uart_req__get_packed_size
                     (const Ciot__UartReq   *message);
size_t ciot__uart_req__pack
                     (const Ciot__UartReq   *message,
                      uint8_t             *out);
size_t ciot__uart_req__pack_to_buffer
                     (const Ciot__UartReq   *message,
                      ProtobufCBuffer     *buffer);
Ciot__UartReq *
       ciot__uart_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ciot__uart_req__free_unpacked
                     (Ciot__UartReq *message,
                      ProtobufCAllocator *allocator);
/* Ciot__UartData methods */
void   ciot__uart_data__init
                     (Ciot__UartData         *message);
size_t ciot__uart_data__get_packed_size
                     (const Ciot__UartData   *message);
size_t ciot__uart_data__pack
                     (const Ciot__UartData   *message,
                      uint8_t             *out);
size_t ciot__uart_data__pack_to_buffer
                     (const Ciot__UartData   *message,
                      ProtobufCBuffer     *buffer);
Ciot__UartData *
       ciot__uart_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ciot__uart_data__free_unpacked
                     (Ciot__UartData *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Ciot__UartCfg_Closure)
                 (const Ciot__UartCfg *message,
                  void *closure_data);
typedef void (*Ciot__UartStatus_Closure)
                 (const Ciot__UartStatus *message,
                  void *closure_data);
typedef void (*Ciot__UartReq_Closure)
                 (const Ciot__UartReq *message,
                  void *closure_data);
typedef void (*Ciot__UartData_Closure)
                 (const Ciot__UartData *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    ciot__uart_state__descriptor;
extern const ProtobufCEnumDescriptor    ciot__uart_req_type__descriptor;
extern const ProtobufCEnumDescriptor    ciot__uart_error__descriptor;
extern const ProtobufCMessageDescriptor ciot__uart_cfg__descriptor;
extern const ProtobufCMessageDescriptor ciot__uart_status__descriptor;
extern const ProtobufCMessageDescriptor ciot__uart_req__descriptor;
extern const ProtobufCMessageDescriptor ciot__uart_data__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_ciot_2fproto_2fv1_2fuart_2eproto__INCLUDED */
